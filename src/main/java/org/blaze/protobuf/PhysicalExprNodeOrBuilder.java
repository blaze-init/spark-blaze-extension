// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/plan.proto

package org.blaze.protobuf;

public interface PhysicalExprNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:plan.protobuf.PhysicalExprNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   * @return Whether the column field is set.
   */
  boolean hasColumn();
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   * @return The column.
   */
  org.blaze.protobuf.PhysicalColumn getColumn();
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   */
  org.blaze.protobuf.PhysicalColumnOrBuilder getColumnOrBuilder();

  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   * @return Whether the literal field is set.
   */
  boolean hasLiteral();
  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   * @return The literal.
   */
  org.blaze.protobuf.ScalarValue getLiteral();
  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   */
  org.blaze.protobuf.ScalarValueOrBuilder getLiteralOrBuilder();

  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 3;</code>
   * @return Whether the binaryExpr field is set.
   */
  boolean hasBinaryExpr();
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 3;</code>
   * @return The binaryExpr.
   */
  org.blaze.protobuf.PhysicalBinaryExprNode getBinaryExpr();
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 3;</code>
   */
  org.blaze.protobuf.PhysicalBinaryExprNodeOrBuilder getBinaryExprOrBuilder();

  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggregateExprNode aggregate_expr = 4;</code>
   * @return Whether the aggregateExpr field is set.
   */
  boolean hasAggregateExpr();
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggregateExprNode aggregate_expr = 4;</code>
   * @return The aggregateExpr.
   */
  org.blaze.protobuf.PhysicalAggregateExprNode getAggregateExpr();
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggregateExprNode aggregate_expr = 4;</code>
   */
  org.blaze.protobuf.PhysicalAggregateExprNodeOrBuilder getAggregateExprOrBuilder();

  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 5;</code>
   * @return Whether the isNullExpr field is set.
   */
  boolean hasIsNullExpr();
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 5;</code>
   * @return The isNullExpr.
   */
  org.blaze.protobuf.PhysicalIsNull getIsNullExpr();
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 5;</code>
   */
  org.blaze.protobuf.PhysicalIsNullOrBuilder getIsNullExprOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 6;</code>
   * @return Whether the isNotNullExpr field is set.
   */
  boolean hasIsNotNullExpr();
  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 6;</code>
   * @return The isNotNullExpr.
   */
  org.blaze.protobuf.PhysicalIsNotNull getIsNotNullExpr();
  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 6;</code>
   */
  org.blaze.protobuf.PhysicalIsNotNullOrBuilder getIsNotNullExprOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 7;</code>
   * @return Whether the notExpr field is set.
   */
  boolean hasNotExpr();
  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 7;</code>
   * @return The notExpr.
   */
  org.blaze.protobuf.PhysicalNot getNotExpr();
  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 7;</code>
   */
  org.blaze.protobuf.PhysicalNotOrBuilder getNotExprOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 8;</code>
   * @return Whether the case field is set.
   */
  boolean hasCase();
  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 8;</code>
   * @return The case.
   */
  org.blaze.protobuf.PhysicalCaseNode getCase();
  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 8;</code>
   */
  org.blaze.protobuf.PhysicalCaseNodeOrBuilder getCaseOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 9;</code>
   * @return Whether the cast field is set.
   */
  boolean hasCast();
  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 9;</code>
   * @return The cast.
   */
  org.blaze.protobuf.PhysicalCastNode getCast();
  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 9;</code>
   */
  org.blaze.protobuf.PhysicalCastNodeOrBuilder getCastOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 10;</code>
   * @return Whether the sort field is set.
   */
  boolean hasSort();
  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 10;</code>
   * @return The sort.
   */
  org.blaze.protobuf.PhysicalSortExprNode getSort();
  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 10;</code>
   */
  org.blaze.protobuf.PhysicalSortExprNodeOrBuilder getSortOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 11;</code>
   * @return Whether the negative field is set.
   */
  boolean hasNegative();
  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 11;</code>
   * @return The negative.
   */
  org.blaze.protobuf.PhysicalNegativeNode getNegative();
  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 11;</code>
   */
  org.blaze.protobuf.PhysicalNegativeNodeOrBuilder getNegativeOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 12;</code>
   * @return Whether the inList field is set.
   */
  boolean hasInList();
  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 12;</code>
   * @return The inList.
   */
  org.blaze.protobuf.PhysicalInListNode getInList();
  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 12;</code>
   */
  org.blaze.protobuf.PhysicalInListNodeOrBuilder getInListOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 13;</code>
   * @return Whether the scalarFunction field is set.
   */
  boolean hasScalarFunction();
  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 13;</code>
   * @return The scalarFunction.
   */
  org.blaze.protobuf.PhysicalScalarFunctionNode getScalarFunction();
  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 13;</code>
   */
  org.blaze.protobuf.PhysicalScalarFunctionNodeOrBuilder getScalarFunctionOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 14;</code>
   * @return Whether the tryCast field is set.
   */
  boolean hasTryCast();
  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 14;</code>
   * @return The tryCast.
   */
  org.blaze.protobuf.PhysicalTryCastNode getTryCast();
  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 14;</code>
   */
  org.blaze.protobuf.PhysicalTryCastNodeOrBuilder getTryCastOrBuilder();

  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalWindowExprNode window_expr = 15;</code>
   * @return Whether the windowExpr field is set.
   */
  boolean hasWindowExpr();
  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalWindowExprNode window_expr = 15;</code>
   * @return The windowExpr.
   */
  org.blaze.protobuf.PhysicalWindowExprNode getWindowExpr();
  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalWindowExprNode window_expr = 15;</code>
   */
  org.blaze.protobuf.PhysicalWindowExprNodeOrBuilder getWindowExprOrBuilder();

  public org.blaze.protobuf.PhysicalExprNode.ExprTypeCase getExprTypeCase();
}
