// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/plan.proto

package org.blaze.protobuf;

public interface PhysicalPlanNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:plan.protobuf.PhysicalPlanNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
   * @return Whether the parquetScan field is set.
   */
  boolean hasParquetScan();
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
   * @return The parquetScan.
   */
  org.blaze.protobuf.ParquetScanExecNode getParquetScan();
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
   */
  org.blaze.protobuf.ParquetScanExecNodeOrBuilder getParquetScanOrBuilder();

  /**
   * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
   * @return Whether the csvScan field is set.
   */
  boolean hasCsvScan();
  /**
   * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
   * @return The csvScan.
   */
  org.blaze.protobuf.CsvScanExecNode getCsvScan();
  /**
   * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
   */
  org.blaze.protobuf.CsvScanExecNodeOrBuilder getCsvScanOrBuilder();

  /**
   * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
   * @return Whether the empty field is set.
   */
  boolean hasEmpty();
  /**
   * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
   * @return The empty.
   */
  org.blaze.protobuf.EmptyExecNode getEmpty();
  /**
   * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
   */
  org.blaze.protobuf.EmptyExecNodeOrBuilder getEmptyOrBuilder();

  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
   * @return Whether the projection field is set.
   */
  boolean hasProjection();
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
   * @return The projection.
   */
  org.blaze.protobuf.ProjectionExecNode getProjection();
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
   */
  org.blaze.protobuf.ProjectionExecNodeOrBuilder getProjectionOrBuilder();

  /**
   * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
   * @return Whether the globalLimit field is set.
   */
  boolean hasGlobalLimit();
  /**
   * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
   * @return The globalLimit.
   */
  org.blaze.protobuf.GlobalLimitExecNode getGlobalLimit();
  /**
   * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
   */
  org.blaze.protobuf.GlobalLimitExecNodeOrBuilder getGlobalLimitOrBuilder();

  /**
   * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
   * @return Whether the localLimit field is set.
   */
  boolean hasLocalLimit();
  /**
   * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
   * @return The localLimit.
   */
  org.blaze.protobuf.LocalLimitExecNode getLocalLimit();
  /**
   * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
   */
  org.blaze.protobuf.LocalLimitExecNodeOrBuilder getLocalLimitOrBuilder();

  /**
   * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
   * @return Whether the hashAggregate field is set.
   */
  boolean hasHashAggregate();
  /**
   * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
   * @return The hashAggregate.
   */
  org.blaze.protobuf.HashAggregateExecNode getHashAggregate();
  /**
   * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
   */
  org.blaze.protobuf.HashAggregateExecNodeOrBuilder getHashAggregateOrBuilder();

  /**
   * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
   * @return Whether the hashJoin field is set.
   */
  boolean hasHashJoin();
  /**
   * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
   * @return The hashJoin.
   */
  org.blaze.protobuf.HashJoinExecNode getHashJoin();
  /**
   * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
   */
  org.blaze.protobuf.HashJoinExecNodeOrBuilder getHashJoinOrBuilder();

  /**
   * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
   * @return Whether the shuffleReader field is set.
   */
  boolean hasShuffleReader();
  /**
   * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
   * @return The shuffleReader.
   */
  org.blaze.protobuf.ShuffleReaderExecNode getShuffleReader();
  /**
   * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
   */
  org.blaze.protobuf.ShuffleReaderExecNodeOrBuilder getShuffleReaderOrBuilder();

  /**
   * <code>.plan.protobuf.SortExecNode sort = 11;</code>
   * @return Whether the sort field is set.
   */
  boolean hasSort();
  /**
   * <code>.plan.protobuf.SortExecNode sort = 11;</code>
   * @return The sort.
   */
  org.blaze.protobuf.SortExecNode getSort();
  /**
   * <code>.plan.protobuf.SortExecNode sort = 11;</code>
   */
  org.blaze.protobuf.SortExecNodeOrBuilder getSortOrBuilder();

  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
   * @return Whether the coalesceBatches field is set.
   */
  boolean hasCoalesceBatches();
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
   * @return The coalesceBatches.
   */
  org.blaze.protobuf.CoalesceBatchesExecNode getCoalesceBatches();
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
   */
  org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder getCoalesceBatchesOrBuilder();

  /**
   * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
   * @return The filter.
   */
  org.blaze.protobuf.FilterExecNode getFilter();
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
   */
  org.blaze.protobuf.FilterExecNodeOrBuilder getFilterOrBuilder();

  /**
   * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
   * @return Whether the merge field is set.
   */
  boolean hasMerge();
  /**
   * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
   * @return The merge.
   */
  org.blaze.protobuf.CoalescePartitionsExecNode getMerge();
  /**
   * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
   */
  org.blaze.protobuf.CoalescePartitionsExecNodeOrBuilder getMergeOrBuilder();

  /**
   * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
   * @return Whether the unresolved field is set.
   */
  boolean hasUnresolved();
  /**
   * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
   * @return The unresolved.
   */
  org.blaze.protobuf.UnresolvedShuffleExecNode getUnresolved();
  /**
   * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
   */
  org.blaze.protobuf.UnresolvedShuffleExecNodeOrBuilder getUnresolvedOrBuilder();

  /**
   * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
   * @return Whether the repartition field is set.
   */
  boolean hasRepartition();
  /**
   * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
   * @return The repartition.
   */
  org.blaze.protobuf.RepartitionExecNode getRepartition();
  /**
   * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
   */
  org.blaze.protobuf.RepartitionExecNodeOrBuilder getRepartitionOrBuilder();

  /**
   * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
   * @return Whether the window field is set.
   */
  boolean hasWindow();
  /**
   * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
   * @return The window.
   */
  org.blaze.protobuf.WindowAggExecNode getWindow();
  /**
   * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
   */
  org.blaze.protobuf.WindowAggExecNodeOrBuilder getWindowOrBuilder();

  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
   * @return Whether the shuffleWriter field is set.
   */
  boolean hasShuffleWriter();
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
   * @return The shuffleWriter.
   */
  org.blaze.protobuf.ShuffleWriterExecNode getShuffleWriter();
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
   */
  org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder getShuffleWriterOrBuilder();

  /**
   * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
   * @return Whether the crossJoin field is set.
   */
  boolean hasCrossJoin();
  /**
   * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
   * @return The crossJoin.
   */
  org.blaze.protobuf.CrossJoinExecNode getCrossJoin();
  /**
   * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
   */
  org.blaze.protobuf.CrossJoinExecNodeOrBuilder getCrossJoinOrBuilder();

  /**
   * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
   * @return Whether the avroScan field is set.
   */
  boolean hasAvroScan();
  /**
   * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
   * @return The avroScan.
   */
  org.blaze.protobuf.AvroScanExecNode getAvroScan();
  /**
   * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
   */
  org.blaze.protobuf.AvroScanExecNodeOrBuilder getAvroScanOrBuilder();

  public org.blaze.protobuf.PhysicalPlanNode.PhysicalPlanTypeCase getPhysicalPlanTypeCase();
}
