// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/plan.proto

package org.blaze.protobuf;

/**
 * <pre>
 * PhysicalPlanNode is a nested type
 * </pre>
 *
 * Protobuf type {@code plan.protobuf.PhysicalPlanNode}
 */
public final class PhysicalPlanNode extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:plan.protobuf.PhysicalPlanNode)
    PhysicalPlanNodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PhysicalPlanNode.newBuilder() to construct.
  private PhysicalPlanNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PhysicalPlanNode() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PhysicalPlanNode();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PhysicalPlanNode(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            org.blaze.protobuf.ParquetScanExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 1) {
              subBuilder = ((org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.ParquetScanExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 1;
            break;
          }
          case 18: {
            org.blaze.protobuf.CsvScanExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 2) {
              subBuilder = ((org.blaze.protobuf.CsvScanExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.CsvScanExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.CsvScanExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 2;
            break;
          }
          case 26: {
            org.blaze.protobuf.EmptyExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 3) {
              subBuilder = ((org.blaze.protobuf.EmptyExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.EmptyExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.EmptyExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 3;
            break;
          }
          case 34: {
            org.blaze.protobuf.ProjectionExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 4) {
              subBuilder = ((org.blaze.protobuf.ProjectionExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.ProjectionExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.ProjectionExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 4;
            break;
          }
          case 50: {
            org.blaze.protobuf.GlobalLimitExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 6) {
              subBuilder = ((org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.GlobalLimitExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 6;
            break;
          }
          case 58: {
            org.blaze.protobuf.LocalLimitExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 7) {
              subBuilder = ((org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.LocalLimitExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 7;
            break;
          }
          case 66: {
            org.blaze.protobuf.HashAggregateExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 8) {
              subBuilder = ((org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.HashAggregateExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 8;
            break;
          }
          case 74: {
            org.blaze.protobuf.HashJoinExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 9) {
              subBuilder = ((org.blaze.protobuf.HashJoinExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.HashJoinExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.HashJoinExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 9;
            break;
          }
          case 82: {
            org.blaze.protobuf.ShuffleReaderExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 10) {
              subBuilder = ((org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.ShuffleReaderExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 10;
            break;
          }
          case 90: {
            org.blaze.protobuf.SortExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 11) {
              subBuilder = ((org.blaze.protobuf.SortExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.SortExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.SortExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 11;
            break;
          }
          case 98: {
            org.blaze.protobuf.CoalesceBatchesExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 12) {
              subBuilder = ((org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.CoalesceBatchesExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 12;
            break;
          }
          case 106: {
            org.blaze.protobuf.FilterExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 13) {
              subBuilder = ((org.blaze.protobuf.FilterExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.FilterExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.FilterExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 13;
            break;
          }
          case 114: {
            org.blaze.protobuf.CoalescePartitionsExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 14) {
              subBuilder = ((org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.CoalescePartitionsExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 14;
            break;
          }
          case 122: {
            org.blaze.protobuf.UnresolvedShuffleExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 15) {
              subBuilder = ((org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.UnresolvedShuffleExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 15;
            break;
          }
          case 130: {
            org.blaze.protobuf.RepartitionExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 16) {
              subBuilder = ((org.blaze.protobuf.RepartitionExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.RepartitionExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.RepartitionExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 16;
            break;
          }
          case 138: {
            org.blaze.protobuf.WindowAggExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 17) {
              subBuilder = ((org.blaze.protobuf.WindowAggExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.WindowAggExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.WindowAggExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 17;
            break;
          }
          case 146: {
            org.blaze.protobuf.ShuffleWriterExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 18) {
              subBuilder = ((org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.ShuffleWriterExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 18;
            break;
          }
          case 154: {
            org.blaze.protobuf.CrossJoinExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 19) {
              subBuilder = ((org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.CrossJoinExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 19;
            break;
          }
          case 162: {
            org.blaze.protobuf.AvroScanExecNode.Builder subBuilder = null;
            if (physicalPlanTypeCase_ == 20) {
              subBuilder = ((org.blaze.protobuf.AvroScanExecNode) physicalPlanType_).toBuilder();
            }
            physicalPlanType_ =
                input.readMessage(org.blaze.protobuf.AvroScanExecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.blaze.protobuf.AvroScanExecNode) physicalPlanType_);
              physicalPlanType_ = subBuilder.buildPartial();
            }
            physicalPlanTypeCase_ = 20;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.blaze.protobuf.PhysicalPlanNode.class, org.blaze.protobuf.PhysicalPlanNode.Builder.class);
  }

  private int physicalPlanTypeCase_ = 0;
  private java.lang.Object physicalPlanType_;
  public enum PhysicalPlanTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PARQUET_SCAN(1),
    CSV_SCAN(2),
    EMPTY(3),
    PROJECTION(4),
    GLOBAL_LIMIT(6),
    LOCAL_LIMIT(7),
    HASH_AGGREGATE(8),
    HASH_JOIN(9),
    SHUFFLE_READER(10),
    SORT(11),
    COALESCE_BATCHES(12),
    FILTER(13),
    MERGE(14),
    UNRESOLVED(15),
    REPARTITION(16),
    WINDOW(17),
    SHUFFLE_WRITER(18),
    CROSS_JOIN(19),
    AVRO_SCAN(20),
    PHYSICALPLANTYPE_NOT_SET(0);
    private final int value;
    private PhysicalPlanTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PhysicalPlanTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static PhysicalPlanTypeCase forNumber(int value) {
      switch (value) {
        case 1: return PARQUET_SCAN;
        case 2: return CSV_SCAN;
        case 3: return EMPTY;
        case 4: return PROJECTION;
        case 6: return GLOBAL_LIMIT;
        case 7: return LOCAL_LIMIT;
        case 8: return HASH_AGGREGATE;
        case 9: return HASH_JOIN;
        case 10: return SHUFFLE_READER;
        case 11: return SORT;
        case 12: return COALESCE_BATCHES;
        case 13: return FILTER;
        case 14: return MERGE;
        case 15: return UNRESOLVED;
        case 16: return REPARTITION;
        case 17: return WINDOW;
        case 18: return SHUFFLE_WRITER;
        case 19: return CROSS_JOIN;
        case 20: return AVRO_SCAN;
        case 0: return PHYSICALPLANTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PhysicalPlanTypeCase
  getPhysicalPlanTypeCase() {
    return PhysicalPlanTypeCase.forNumber(
        physicalPlanTypeCase_);
  }

  public static final int PARQUET_SCAN_FIELD_NUMBER = 1;
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
   * @return Whether the parquetScan field is set.
   */
  @java.lang.Override
  public boolean hasParquetScan() {
    return physicalPlanTypeCase_ == 1;
  }
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
   * @return The parquetScan.
   */
  @java.lang.Override
  public org.blaze.protobuf.ParquetScanExecNode getParquetScan() {
    if (physicalPlanTypeCase_ == 1) {
       return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ParquetScanExecNodeOrBuilder getParquetScanOrBuilder() {
    if (physicalPlanTypeCase_ == 1) {
       return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
  }

  public static final int CSV_SCAN_FIELD_NUMBER = 2;
  /**
   * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
   * @return Whether the csvScan field is set.
   */
  @java.lang.Override
  public boolean hasCsvScan() {
    return physicalPlanTypeCase_ == 2;
  }
  /**
   * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
   * @return The csvScan.
   */
  @java.lang.Override
  public org.blaze.protobuf.CsvScanExecNode getCsvScan() {
    if (physicalPlanTypeCase_ == 2) {
       return (org.blaze.protobuf.CsvScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CsvScanExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.CsvScanExecNodeOrBuilder getCsvScanOrBuilder() {
    if (physicalPlanTypeCase_ == 2) {
       return (org.blaze.protobuf.CsvScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CsvScanExecNode.getDefaultInstance();
  }

  public static final int EMPTY_FIELD_NUMBER = 3;
  /**
   * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
   * @return Whether the empty field is set.
   */
  @java.lang.Override
  public boolean hasEmpty() {
    return physicalPlanTypeCase_ == 3;
  }
  /**
   * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
   * @return The empty.
   */
  @java.lang.Override
  public org.blaze.protobuf.EmptyExecNode getEmpty() {
    if (physicalPlanTypeCase_ == 3) {
       return (org.blaze.protobuf.EmptyExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.EmptyExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.EmptyExecNodeOrBuilder getEmptyOrBuilder() {
    if (physicalPlanTypeCase_ == 3) {
       return (org.blaze.protobuf.EmptyExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.EmptyExecNode.getDefaultInstance();
  }

  public static final int PROJECTION_FIELD_NUMBER = 4;
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
   * @return Whether the projection field is set.
   */
  @java.lang.Override
  public boolean hasProjection() {
    return physicalPlanTypeCase_ == 4;
  }
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
   * @return The projection.
   */
  @java.lang.Override
  public org.blaze.protobuf.ProjectionExecNode getProjection() {
    if (physicalPlanTypeCase_ == 4) {
       return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ProjectionExecNodeOrBuilder getProjectionOrBuilder() {
    if (physicalPlanTypeCase_ == 4) {
       return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
  }

  public static final int GLOBAL_LIMIT_FIELD_NUMBER = 6;
  /**
   * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
   * @return Whether the globalLimit field is set.
   */
  @java.lang.Override
  public boolean hasGlobalLimit() {
    return physicalPlanTypeCase_ == 6;
  }
  /**
   * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
   * @return The globalLimit.
   */
  @java.lang.Override
  public org.blaze.protobuf.GlobalLimitExecNode getGlobalLimit() {
    if (physicalPlanTypeCase_ == 6) {
       return (org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.GlobalLimitExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.GlobalLimitExecNodeOrBuilder getGlobalLimitOrBuilder() {
    if (physicalPlanTypeCase_ == 6) {
       return (org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.GlobalLimitExecNode.getDefaultInstance();
  }

  public static final int LOCAL_LIMIT_FIELD_NUMBER = 7;
  /**
   * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
   * @return Whether the localLimit field is set.
   */
  @java.lang.Override
  public boolean hasLocalLimit() {
    return physicalPlanTypeCase_ == 7;
  }
  /**
   * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
   * @return The localLimit.
   */
  @java.lang.Override
  public org.blaze.protobuf.LocalLimitExecNode getLocalLimit() {
    if (physicalPlanTypeCase_ == 7) {
       return (org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.LocalLimitExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.LocalLimitExecNodeOrBuilder getLocalLimitOrBuilder() {
    if (physicalPlanTypeCase_ == 7) {
       return (org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.LocalLimitExecNode.getDefaultInstance();
  }

  public static final int HASH_AGGREGATE_FIELD_NUMBER = 8;
  /**
   * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
   * @return Whether the hashAggregate field is set.
   */
  @java.lang.Override
  public boolean hasHashAggregate() {
    return physicalPlanTypeCase_ == 8;
  }
  /**
   * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
   * @return The hashAggregate.
   */
  @java.lang.Override
  public org.blaze.protobuf.HashAggregateExecNode getHashAggregate() {
    if (physicalPlanTypeCase_ == 8) {
       return (org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.HashAggregateExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.HashAggregateExecNodeOrBuilder getHashAggregateOrBuilder() {
    if (physicalPlanTypeCase_ == 8) {
       return (org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.HashAggregateExecNode.getDefaultInstance();
  }

  public static final int HASH_JOIN_FIELD_NUMBER = 9;
  /**
   * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
   * @return Whether the hashJoin field is set.
   */
  @java.lang.Override
  public boolean hasHashJoin() {
    return physicalPlanTypeCase_ == 9;
  }
  /**
   * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
   * @return The hashJoin.
   */
  @java.lang.Override
  public org.blaze.protobuf.HashJoinExecNode getHashJoin() {
    if (physicalPlanTypeCase_ == 9) {
       return (org.blaze.protobuf.HashJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.HashJoinExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.HashJoinExecNodeOrBuilder getHashJoinOrBuilder() {
    if (physicalPlanTypeCase_ == 9) {
       return (org.blaze.protobuf.HashJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.HashJoinExecNode.getDefaultInstance();
  }

  public static final int SHUFFLE_READER_FIELD_NUMBER = 10;
  /**
   * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
   * @return Whether the shuffleReader field is set.
   */
  @java.lang.Override
  public boolean hasShuffleReader() {
    return physicalPlanTypeCase_ == 10;
  }
  /**
   * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
   * @return The shuffleReader.
   */
  @java.lang.Override
  public org.blaze.protobuf.ShuffleReaderExecNode getShuffleReader() {
    if (physicalPlanTypeCase_ == 10) {
       return (org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ShuffleReaderExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ShuffleReaderExecNodeOrBuilder getShuffleReaderOrBuilder() {
    if (physicalPlanTypeCase_ == 10) {
       return (org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ShuffleReaderExecNode.getDefaultInstance();
  }

  public static final int SORT_FIELD_NUMBER = 11;
  /**
   * <code>.plan.protobuf.SortExecNode sort = 11;</code>
   * @return Whether the sort field is set.
   */
  @java.lang.Override
  public boolean hasSort() {
    return physicalPlanTypeCase_ == 11;
  }
  /**
   * <code>.plan.protobuf.SortExecNode sort = 11;</code>
   * @return The sort.
   */
  @java.lang.Override
  public org.blaze.protobuf.SortExecNode getSort() {
    if (physicalPlanTypeCase_ == 11) {
       return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.SortExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.SortExecNode sort = 11;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.SortExecNodeOrBuilder getSortOrBuilder() {
    if (physicalPlanTypeCase_ == 11) {
       return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.SortExecNode.getDefaultInstance();
  }

  public static final int COALESCE_BATCHES_FIELD_NUMBER = 12;
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
   * @return Whether the coalesceBatches field is set.
   */
  @java.lang.Override
  public boolean hasCoalesceBatches() {
    return physicalPlanTypeCase_ == 12;
  }
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
   * @return The coalesceBatches.
   */
  @java.lang.Override
  public org.blaze.protobuf.CoalesceBatchesExecNode getCoalesceBatches() {
    if (physicalPlanTypeCase_ == 12) {
       return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder getCoalesceBatchesOrBuilder() {
    if (physicalPlanTypeCase_ == 12) {
       return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
  }

  public static final int FILTER_FIELD_NUMBER = 13;
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
   * @return Whether the filter field is set.
   */
  @java.lang.Override
  public boolean hasFilter() {
    return physicalPlanTypeCase_ == 13;
  }
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
   * @return The filter.
   */
  @java.lang.Override
  public org.blaze.protobuf.FilterExecNode getFilter() {
    if (physicalPlanTypeCase_ == 13) {
       return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.FilterExecNodeOrBuilder getFilterOrBuilder() {
    if (physicalPlanTypeCase_ == 13) {
       return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
  }

  public static final int MERGE_FIELD_NUMBER = 14;
  /**
   * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
   * @return Whether the merge field is set.
   */
  @java.lang.Override
  public boolean hasMerge() {
    return physicalPlanTypeCase_ == 14;
  }
  /**
   * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
   * @return The merge.
   */
  @java.lang.Override
  public org.blaze.protobuf.CoalescePartitionsExecNode getMerge() {
    if (physicalPlanTypeCase_ == 14) {
       return (org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CoalescePartitionsExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.CoalescePartitionsExecNodeOrBuilder getMergeOrBuilder() {
    if (physicalPlanTypeCase_ == 14) {
       return (org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CoalescePartitionsExecNode.getDefaultInstance();
  }

  public static final int UNRESOLVED_FIELD_NUMBER = 15;
  /**
   * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
   * @return Whether the unresolved field is set.
   */
  @java.lang.Override
  public boolean hasUnresolved() {
    return physicalPlanTypeCase_ == 15;
  }
  /**
   * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
   * @return The unresolved.
   */
  @java.lang.Override
  public org.blaze.protobuf.UnresolvedShuffleExecNode getUnresolved() {
    if (physicalPlanTypeCase_ == 15) {
       return (org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.UnresolvedShuffleExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.UnresolvedShuffleExecNodeOrBuilder getUnresolvedOrBuilder() {
    if (physicalPlanTypeCase_ == 15) {
       return (org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.UnresolvedShuffleExecNode.getDefaultInstance();
  }

  public static final int REPARTITION_FIELD_NUMBER = 16;
  /**
   * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
   * @return Whether the repartition field is set.
   */
  @java.lang.Override
  public boolean hasRepartition() {
    return physicalPlanTypeCase_ == 16;
  }
  /**
   * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
   * @return The repartition.
   */
  @java.lang.Override
  public org.blaze.protobuf.RepartitionExecNode getRepartition() {
    if (physicalPlanTypeCase_ == 16) {
       return (org.blaze.protobuf.RepartitionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.RepartitionExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.RepartitionExecNodeOrBuilder getRepartitionOrBuilder() {
    if (physicalPlanTypeCase_ == 16) {
       return (org.blaze.protobuf.RepartitionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.RepartitionExecNode.getDefaultInstance();
  }

  public static final int WINDOW_FIELD_NUMBER = 17;
  /**
   * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
   * @return Whether the window field is set.
   */
  @java.lang.Override
  public boolean hasWindow() {
    return physicalPlanTypeCase_ == 17;
  }
  /**
   * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
   * @return The window.
   */
  @java.lang.Override
  public org.blaze.protobuf.WindowAggExecNode getWindow() {
    if (physicalPlanTypeCase_ == 17) {
       return (org.blaze.protobuf.WindowAggExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.WindowAggExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.WindowAggExecNodeOrBuilder getWindowOrBuilder() {
    if (physicalPlanTypeCase_ == 17) {
       return (org.blaze.protobuf.WindowAggExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.WindowAggExecNode.getDefaultInstance();
  }

  public static final int SHUFFLE_WRITER_FIELD_NUMBER = 18;
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
   * @return Whether the shuffleWriter field is set.
   */
  @java.lang.Override
  public boolean hasShuffleWriter() {
    return physicalPlanTypeCase_ == 18;
  }
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
   * @return The shuffleWriter.
   */
  @java.lang.Override
  public org.blaze.protobuf.ShuffleWriterExecNode getShuffleWriter() {
    if (physicalPlanTypeCase_ == 18) {
       return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder getShuffleWriterOrBuilder() {
    if (physicalPlanTypeCase_ == 18) {
       return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
  }

  public static final int CROSS_JOIN_FIELD_NUMBER = 19;
  /**
   * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
   * @return Whether the crossJoin field is set.
   */
  @java.lang.Override
  public boolean hasCrossJoin() {
    return physicalPlanTypeCase_ == 19;
  }
  /**
   * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
   * @return The crossJoin.
   */
  @java.lang.Override
  public org.blaze.protobuf.CrossJoinExecNode getCrossJoin() {
    if (physicalPlanTypeCase_ == 19) {
       return (org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CrossJoinExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.CrossJoinExecNodeOrBuilder getCrossJoinOrBuilder() {
    if (physicalPlanTypeCase_ == 19) {
       return (org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CrossJoinExecNode.getDefaultInstance();
  }

  public static final int AVRO_SCAN_FIELD_NUMBER = 20;
  /**
   * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
   * @return Whether the avroScan field is set.
   */
  @java.lang.Override
  public boolean hasAvroScan() {
    return physicalPlanTypeCase_ == 20;
  }
  /**
   * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
   * @return The avroScan.
   */
  @java.lang.Override
  public org.blaze.protobuf.AvroScanExecNode getAvroScan() {
    if (physicalPlanTypeCase_ == 20) {
       return (org.blaze.protobuf.AvroScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.AvroScanExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.AvroScanExecNodeOrBuilder getAvroScanOrBuilder() {
    if (physicalPlanTypeCase_ == 20) {
       return (org.blaze.protobuf.AvroScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.AvroScanExecNode.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (physicalPlanTypeCase_ == 1) {
      output.writeMessage(1, (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 2) {
      output.writeMessage(2, (org.blaze.protobuf.CsvScanExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 3) {
      output.writeMessage(3, (org.blaze.protobuf.EmptyExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 4) {
      output.writeMessage(4, (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 6) {
      output.writeMessage(6, (org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 7) {
      output.writeMessage(7, (org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 8) {
      output.writeMessage(8, (org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 9) {
      output.writeMessage(9, (org.blaze.protobuf.HashJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 10) {
      output.writeMessage(10, (org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 11) {
      output.writeMessage(11, (org.blaze.protobuf.SortExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 12) {
      output.writeMessage(12, (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 13) {
      output.writeMessage(13, (org.blaze.protobuf.FilterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 14) {
      output.writeMessage(14, (org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 15) {
      output.writeMessage(15, (org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 16) {
      output.writeMessage(16, (org.blaze.protobuf.RepartitionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 17) {
      output.writeMessage(17, (org.blaze.protobuf.WindowAggExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 18) {
      output.writeMessage(18, (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 19) {
      output.writeMessage(19, (org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 20) {
      output.writeMessage(20, (org.blaze.protobuf.AvroScanExecNode) physicalPlanType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (physicalPlanTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.blaze.protobuf.CsvScanExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.blaze.protobuf.EmptyExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.blaze.protobuf.HashJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.blaze.protobuf.SortExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (org.blaze.protobuf.FilterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (org.blaze.protobuf.RepartitionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (org.blaze.protobuf.WindowAggExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (org.blaze.protobuf.AvroScanExecNode) physicalPlanType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.blaze.protobuf.PhysicalPlanNode)) {
      return super.equals(obj);
    }
    org.blaze.protobuf.PhysicalPlanNode other = (org.blaze.protobuf.PhysicalPlanNode) obj;

    if (!getPhysicalPlanTypeCase().equals(other.getPhysicalPlanTypeCase())) return false;
    switch (physicalPlanTypeCase_) {
      case 1:
        if (!getParquetScan()
            .equals(other.getParquetScan())) return false;
        break;
      case 2:
        if (!getCsvScan()
            .equals(other.getCsvScan())) return false;
        break;
      case 3:
        if (!getEmpty()
            .equals(other.getEmpty())) return false;
        break;
      case 4:
        if (!getProjection()
            .equals(other.getProjection())) return false;
        break;
      case 6:
        if (!getGlobalLimit()
            .equals(other.getGlobalLimit())) return false;
        break;
      case 7:
        if (!getLocalLimit()
            .equals(other.getLocalLimit())) return false;
        break;
      case 8:
        if (!getHashAggregate()
            .equals(other.getHashAggregate())) return false;
        break;
      case 9:
        if (!getHashJoin()
            .equals(other.getHashJoin())) return false;
        break;
      case 10:
        if (!getShuffleReader()
            .equals(other.getShuffleReader())) return false;
        break;
      case 11:
        if (!getSort()
            .equals(other.getSort())) return false;
        break;
      case 12:
        if (!getCoalesceBatches()
            .equals(other.getCoalesceBatches())) return false;
        break;
      case 13:
        if (!getFilter()
            .equals(other.getFilter())) return false;
        break;
      case 14:
        if (!getMerge()
            .equals(other.getMerge())) return false;
        break;
      case 15:
        if (!getUnresolved()
            .equals(other.getUnresolved())) return false;
        break;
      case 16:
        if (!getRepartition()
            .equals(other.getRepartition())) return false;
        break;
      case 17:
        if (!getWindow()
            .equals(other.getWindow())) return false;
        break;
      case 18:
        if (!getShuffleWriter()
            .equals(other.getShuffleWriter())) return false;
        break;
      case 19:
        if (!getCrossJoin()
            .equals(other.getCrossJoin())) return false;
        break;
      case 20:
        if (!getAvroScan()
            .equals(other.getAvroScan())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (physicalPlanTypeCase_) {
      case 1:
        hash = (37 * hash) + PARQUET_SCAN_FIELD_NUMBER;
        hash = (53 * hash) + getParquetScan().hashCode();
        break;
      case 2:
        hash = (37 * hash) + CSV_SCAN_FIELD_NUMBER;
        hash = (53 * hash) + getCsvScan().hashCode();
        break;
      case 3:
        hash = (37 * hash) + EMPTY_FIELD_NUMBER;
        hash = (53 * hash) + getEmpty().hashCode();
        break;
      case 4:
        hash = (37 * hash) + PROJECTION_FIELD_NUMBER;
        hash = (53 * hash) + getProjection().hashCode();
        break;
      case 6:
        hash = (37 * hash) + GLOBAL_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getGlobalLimit().hashCode();
        break;
      case 7:
        hash = (37 * hash) + LOCAL_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getLocalLimit().hashCode();
        break;
      case 8:
        hash = (37 * hash) + HASH_AGGREGATE_FIELD_NUMBER;
        hash = (53 * hash) + getHashAggregate().hashCode();
        break;
      case 9:
        hash = (37 * hash) + HASH_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getHashJoin().hashCode();
        break;
      case 10:
        hash = (37 * hash) + SHUFFLE_READER_FIELD_NUMBER;
        hash = (53 * hash) + getShuffleReader().hashCode();
        break;
      case 11:
        hash = (37 * hash) + SORT_FIELD_NUMBER;
        hash = (53 * hash) + getSort().hashCode();
        break;
      case 12:
        hash = (37 * hash) + COALESCE_BATCHES_FIELD_NUMBER;
        hash = (53 * hash) + getCoalesceBatches().hashCode();
        break;
      case 13:
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
        break;
      case 14:
        hash = (37 * hash) + MERGE_FIELD_NUMBER;
        hash = (53 * hash) + getMerge().hashCode();
        break;
      case 15:
        hash = (37 * hash) + UNRESOLVED_FIELD_NUMBER;
        hash = (53 * hash) + getUnresolved().hashCode();
        break;
      case 16:
        hash = (37 * hash) + REPARTITION_FIELD_NUMBER;
        hash = (53 * hash) + getRepartition().hashCode();
        break;
      case 17:
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        break;
      case 18:
        hash = (37 * hash) + SHUFFLE_WRITER_FIELD_NUMBER;
        hash = (53 * hash) + getShuffleWriter().hashCode();
        break;
      case 19:
        hash = (37 * hash) + CROSS_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getCrossJoin().hashCode();
        break;
      case 20:
        hash = (37 * hash) + AVRO_SCAN_FIELD_NUMBER;
        hash = (53 * hash) + getAvroScan().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.blaze.protobuf.PhysicalPlanNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * PhysicalPlanNode is a nested type
   * </pre>
   *
   * Protobuf type {@code plan.protobuf.PhysicalPlanNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:plan.protobuf.PhysicalPlanNode)
      org.blaze.protobuf.PhysicalPlanNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.blaze.protobuf.PhysicalPlanNode.class, org.blaze.protobuf.PhysicalPlanNode.Builder.class);
    }

    // Construct using org.blaze.protobuf.PhysicalPlanNode.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      physicalPlanTypeCase_ = 0;
      physicalPlanType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_descriptor;
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalPlanNode getDefaultInstanceForType() {
      return org.blaze.protobuf.PhysicalPlanNode.getDefaultInstance();
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalPlanNode build() {
      org.blaze.protobuf.PhysicalPlanNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalPlanNode buildPartial() {
      org.blaze.protobuf.PhysicalPlanNode result = new org.blaze.protobuf.PhysicalPlanNode(this);
      if (physicalPlanTypeCase_ == 1) {
        if (parquetScanBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = parquetScanBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 2) {
        if (csvScanBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = csvScanBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 3) {
        if (emptyBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = emptyBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 4) {
        if (projectionBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = projectionBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 6) {
        if (globalLimitBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = globalLimitBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 7) {
        if (localLimitBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = localLimitBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 8) {
        if (hashAggregateBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = hashAggregateBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 9) {
        if (hashJoinBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = hashJoinBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 10) {
        if (shuffleReaderBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = shuffleReaderBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 11) {
        if (sortBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = sortBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 12) {
        if (coalesceBatchesBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = coalesceBatchesBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 13) {
        if (filterBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = filterBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 14) {
        if (mergeBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = mergeBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 15) {
        if (unresolvedBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = unresolvedBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 16) {
        if (repartitionBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = repartitionBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 17) {
        if (windowBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = windowBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 18) {
        if (shuffleWriterBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = shuffleWriterBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 19) {
        if (crossJoinBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = crossJoinBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 20) {
        if (avroScanBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = avroScanBuilder_.build();
        }
      }
      result.physicalPlanTypeCase_ = physicalPlanTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.blaze.protobuf.PhysicalPlanNode) {
        return mergeFrom((org.blaze.protobuf.PhysicalPlanNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.blaze.protobuf.PhysicalPlanNode other) {
      if (other == org.blaze.protobuf.PhysicalPlanNode.getDefaultInstance()) return this;
      switch (other.getPhysicalPlanTypeCase()) {
        case PARQUET_SCAN: {
          mergeParquetScan(other.getParquetScan());
          break;
        }
        case CSV_SCAN: {
          mergeCsvScan(other.getCsvScan());
          break;
        }
        case EMPTY: {
          mergeEmpty(other.getEmpty());
          break;
        }
        case PROJECTION: {
          mergeProjection(other.getProjection());
          break;
        }
        case GLOBAL_LIMIT: {
          mergeGlobalLimit(other.getGlobalLimit());
          break;
        }
        case LOCAL_LIMIT: {
          mergeLocalLimit(other.getLocalLimit());
          break;
        }
        case HASH_AGGREGATE: {
          mergeHashAggregate(other.getHashAggregate());
          break;
        }
        case HASH_JOIN: {
          mergeHashJoin(other.getHashJoin());
          break;
        }
        case SHUFFLE_READER: {
          mergeShuffleReader(other.getShuffleReader());
          break;
        }
        case SORT: {
          mergeSort(other.getSort());
          break;
        }
        case COALESCE_BATCHES: {
          mergeCoalesceBatches(other.getCoalesceBatches());
          break;
        }
        case FILTER: {
          mergeFilter(other.getFilter());
          break;
        }
        case MERGE: {
          mergeMerge(other.getMerge());
          break;
        }
        case UNRESOLVED: {
          mergeUnresolved(other.getUnresolved());
          break;
        }
        case REPARTITION: {
          mergeRepartition(other.getRepartition());
          break;
        }
        case WINDOW: {
          mergeWindow(other.getWindow());
          break;
        }
        case SHUFFLE_WRITER: {
          mergeShuffleWriter(other.getShuffleWriter());
          break;
        }
        case CROSS_JOIN: {
          mergeCrossJoin(other.getCrossJoin());
          break;
        }
        case AVRO_SCAN: {
          mergeAvroScan(other.getAvroScan());
          break;
        }
        case PHYSICALPLANTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.blaze.protobuf.PhysicalPlanNode parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.blaze.protobuf.PhysicalPlanNode) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int physicalPlanTypeCase_ = 0;
    private java.lang.Object physicalPlanType_;
    public PhysicalPlanTypeCase
        getPhysicalPlanTypeCase() {
      return PhysicalPlanTypeCase.forNumber(
          physicalPlanTypeCase_);
    }

    public Builder clearPhysicalPlanType() {
      physicalPlanTypeCase_ = 0;
      physicalPlanType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ParquetScanExecNode, org.blaze.protobuf.ParquetScanExecNode.Builder, org.blaze.protobuf.ParquetScanExecNodeOrBuilder> parquetScanBuilder_;
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     * @return Whether the parquetScan field is set.
     */
    @java.lang.Override
    public boolean hasParquetScan() {
      return physicalPlanTypeCase_ == 1;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     * @return The parquetScan.
     */
    @java.lang.Override
    public org.blaze.protobuf.ParquetScanExecNode getParquetScan() {
      if (parquetScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 1) {
          return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 1) {
          return parquetScanBuilder_.getMessage();
        }
        return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     */
    public Builder setParquetScan(org.blaze.protobuf.ParquetScanExecNode value) {
      if (parquetScanBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        parquetScanBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     */
    public Builder setParquetScan(
        org.blaze.protobuf.ParquetScanExecNode.Builder builderForValue) {
      if (parquetScanBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        parquetScanBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     */
    public Builder mergeParquetScan(org.blaze.protobuf.ParquetScanExecNode value) {
      if (parquetScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 1 &&
            physicalPlanType_ != org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ParquetScanExecNode.newBuilder((org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 1) {
          parquetScanBuilder_.mergeFrom(value);
        }
        parquetScanBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     */
    public Builder clearParquetScan() {
      if (parquetScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 1) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 1) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        parquetScanBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     */
    public org.blaze.protobuf.ParquetScanExecNode.Builder getParquetScanBuilder() {
      return getParquetScanFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ParquetScanExecNodeOrBuilder getParquetScanOrBuilder() {
      if ((physicalPlanTypeCase_ == 1) && (parquetScanBuilder_ != null)) {
        return parquetScanBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 1) {
          return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ParquetScanExecNode, org.blaze.protobuf.ParquetScanExecNode.Builder, org.blaze.protobuf.ParquetScanExecNodeOrBuilder> 
        getParquetScanFieldBuilder() {
      if (parquetScanBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 1)) {
          physicalPlanType_ = org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
        }
        parquetScanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ParquetScanExecNode, org.blaze.protobuf.ParquetScanExecNode.Builder, org.blaze.protobuf.ParquetScanExecNodeOrBuilder>(
                (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 1;
      onChanged();;
      return parquetScanBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CsvScanExecNode, org.blaze.protobuf.CsvScanExecNode.Builder, org.blaze.protobuf.CsvScanExecNodeOrBuilder> csvScanBuilder_;
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     * @return Whether the csvScan field is set.
     */
    @java.lang.Override
    public boolean hasCsvScan() {
      return physicalPlanTypeCase_ == 2;
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     * @return The csvScan.
     */
    @java.lang.Override
    public org.blaze.protobuf.CsvScanExecNode getCsvScan() {
      if (csvScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 2) {
          return (org.blaze.protobuf.CsvScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CsvScanExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 2) {
          return csvScanBuilder_.getMessage();
        }
        return org.blaze.protobuf.CsvScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     */
    public Builder setCsvScan(org.blaze.protobuf.CsvScanExecNode value) {
      if (csvScanBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        csvScanBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     */
    public Builder setCsvScan(
        org.blaze.protobuf.CsvScanExecNode.Builder builderForValue) {
      if (csvScanBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        csvScanBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     */
    public Builder mergeCsvScan(org.blaze.protobuf.CsvScanExecNode value) {
      if (csvScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 2 &&
            physicalPlanType_ != org.blaze.protobuf.CsvScanExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.CsvScanExecNode.newBuilder((org.blaze.protobuf.CsvScanExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 2) {
          csvScanBuilder_.mergeFrom(value);
        }
        csvScanBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     */
    public Builder clearCsvScan() {
      if (csvScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 2) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 2) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        csvScanBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     */
    public org.blaze.protobuf.CsvScanExecNode.Builder getCsvScanBuilder() {
      return getCsvScanFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.CsvScanExecNodeOrBuilder getCsvScanOrBuilder() {
      if ((physicalPlanTypeCase_ == 2) && (csvScanBuilder_ != null)) {
        return csvScanBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 2) {
          return (org.blaze.protobuf.CsvScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CsvScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CsvScanExecNode csv_scan = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CsvScanExecNode, org.blaze.protobuf.CsvScanExecNode.Builder, org.blaze.protobuf.CsvScanExecNodeOrBuilder> 
        getCsvScanFieldBuilder() {
      if (csvScanBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 2)) {
          physicalPlanType_ = org.blaze.protobuf.CsvScanExecNode.getDefaultInstance();
        }
        csvScanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.CsvScanExecNode, org.blaze.protobuf.CsvScanExecNode.Builder, org.blaze.protobuf.CsvScanExecNodeOrBuilder>(
                (org.blaze.protobuf.CsvScanExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 2;
      onChanged();;
      return csvScanBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.EmptyExecNode, org.blaze.protobuf.EmptyExecNode.Builder, org.blaze.protobuf.EmptyExecNodeOrBuilder> emptyBuilder_;
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     * @return Whether the empty field is set.
     */
    @java.lang.Override
    public boolean hasEmpty() {
      return physicalPlanTypeCase_ == 3;
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     * @return The empty.
     */
    @java.lang.Override
    public org.blaze.protobuf.EmptyExecNode getEmpty() {
      if (emptyBuilder_ == null) {
        if (physicalPlanTypeCase_ == 3) {
          return (org.blaze.protobuf.EmptyExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.EmptyExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 3) {
          return emptyBuilder_.getMessage();
        }
        return org.blaze.protobuf.EmptyExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     */
    public Builder setEmpty(org.blaze.protobuf.EmptyExecNode value) {
      if (emptyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        emptyBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     */
    public Builder setEmpty(
        org.blaze.protobuf.EmptyExecNode.Builder builderForValue) {
      if (emptyBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        emptyBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     */
    public Builder mergeEmpty(org.blaze.protobuf.EmptyExecNode value) {
      if (emptyBuilder_ == null) {
        if (physicalPlanTypeCase_ == 3 &&
            physicalPlanType_ != org.blaze.protobuf.EmptyExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.EmptyExecNode.newBuilder((org.blaze.protobuf.EmptyExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 3) {
          emptyBuilder_.mergeFrom(value);
        }
        emptyBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     */
    public Builder clearEmpty() {
      if (emptyBuilder_ == null) {
        if (physicalPlanTypeCase_ == 3) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 3) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        emptyBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     */
    public org.blaze.protobuf.EmptyExecNode.Builder getEmptyBuilder() {
      return getEmptyFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.EmptyExecNodeOrBuilder getEmptyOrBuilder() {
      if ((physicalPlanTypeCase_ == 3) && (emptyBuilder_ != null)) {
        return emptyBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 3) {
          return (org.blaze.protobuf.EmptyExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.EmptyExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.EmptyExecNode empty = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.EmptyExecNode, org.blaze.protobuf.EmptyExecNode.Builder, org.blaze.protobuf.EmptyExecNodeOrBuilder> 
        getEmptyFieldBuilder() {
      if (emptyBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 3)) {
          physicalPlanType_ = org.blaze.protobuf.EmptyExecNode.getDefaultInstance();
        }
        emptyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.EmptyExecNode, org.blaze.protobuf.EmptyExecNode.Builder, org.blaze.protobuf.EmptyExecNodeOrBuilder>(
                (org.blaze.protobuf.EmptyExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 3;
      onChanged();;
      return emptyBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ProjectionExecNode, org.blaze.protobuf.ProjectionExecNode.Builder, org.blaze.protobuf.ProjectionExecNodeOrBuilder> projectionBuilder_;
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     * @return Whether the projection field is set.
     */
    @java.lang.Override
    public boolean hasProjection() {
      return physicalPlanTypeCase_ == 4;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     * @return The projection.
     */
    @java.lang.Override
    public org.blaze.protobuf.ProjectionExecNode getProjection() {
      if (projectionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 4) {
          return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 4) {
          return projectionBuilder_.getMessage();
        }
        return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     */
    public Builder setProjection(org.blaze.protobuf.ProjectionExecNode value) {
      if (projectionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        projectionBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     */
    public Builder setProjection(
        org.blaze.protobuf.ProjectionExecNode.Builder builderForValue) {
      if (projectionBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        projectionBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     */
    public Builder mergeProjection(org.blaze.protobuf.ProjectionExecNode value) {
      if (projectionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 4 &&
            physicalPlanType_ != org.blaze.protobuf.ProjectionExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ProjectionExecNode.newBuilder((org.blaze.protobuf.ProjectionExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 4) {
          projectionBuilder_.mergeFrom(value);
        }
        projectionBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     */
    public Builder clearProjection() {
      if (projectionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 4) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 4) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        projectionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     */
    public org.blaze.protobuf.ProjectionExecNode.Builder getProjectionBuilder() {
      return getProjectionFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ProjectionExecNodeOrBuilder getProjectionOrBuilder() {
      if ((physicalPlanTypeCase_ == 4) && (projectionBuilder_ != null)) {
        return projectionBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 4) {
          return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ProjectionExecNode, org.blaze.protobuf.ProjectionExecNode.Builder, org.blaze.protobuf.ProjectionExecNodeOrBuilder> 
        getProjectionFieldBuilder() {
      if (projectionBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 4)) {
          physicalPlanType_ = org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
        }
        projectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ProjectionExecNode, org.blaze.protobuf.ProjectionExecNode.Builder, org.blaze.protobuf.ProjectionExecNodeOrBuilder>(
                (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 4;
      onChanged();;
      return projectionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.GlobalLimitExecNode, org.blaze.protobuf.GlobalLimitExecNode.Builder, org.blaze.protobuf.GlobalLimitExecNodeOrBuilder> globalLimitBuilder_;
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     * @return Whether the globalLimit field is set.
     */
    @java.lang.Override
    public boolean hasGlobalLimit() {
      return physicalPlanTypeCase_ == 6;
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     * @return The globalLimit.
     */
    @java.lang.Override
    public org.blaze.protobuf.GlobalLimitExecNode getGlobalLimit() {
      if (globalLimitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 6) {
          return (org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.GlobalLimitExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 6) {
          return globalLimitBuilder_.getMessage();
        }
        return org.blaze.protobuf.GlobalLimitExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     */
    public Builder setGlobalLimit(org.blaze.protobuf.GlobalLimitExecNode value) {
      if (globalLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        globalLimitBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     */
    public Builder setGlobalLimit(
        org.blaze.protobuf.GlobalLimitExecNode.Builder builderForValue) {
      if (globalLimitBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        globalLimitBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     */
    public Builder mergeGlobalLimit(org.blaze.protobuf.GlobalLimitExecNode value) {
      if (globalLimitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 6 &&
            physicalPlanType_ != org.blaze.protobuf.GlobalLimitExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.GlobalLimitExecNode.newBuilder((org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 6) {
          globalLimitBuilder_.mergeFrom(value);
        }
        globalLimitBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     */
    public Builder clearGlobalLimit() {
      if (globalLimitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 6) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 6) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        globalLimitBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     */
    public org.blaze.protobuf.GlobalLimitExecNode.Builder getGlobalLimitBuilder() {
      return getGlobalLimitFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.GlobalLimitExecNodeOrBuilder getGlobalLimitOrBuilder() {
      if ((physicalPlanTypeCase_ == 6) && (globalLimitBuilder_ != null)) {
        return globalLimitBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 6) {
          return (org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.GlobalLimitExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.GlobalLimitExecNode global_limit = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.GlobalLimitExecNode, org.blaze.protobuf.GlobalLimitExecNode.Builder, org.blaze.protobuf.GlobalLimitExecNodeOrBuilder> 
        getGlobalLimitFieldBuilder() {
      if (globalLimitBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 6)) {
          physicalPlanType_ = org.blaze.protobuf.GlobalLimitExecNode.getDefaultInstance();
        }
        globalLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.GlobalLimitExecNode, org.blaze.protobuf.GlobalLimitExecNode.Builder, org.blaze.protobuf.GlobalLimitExecNodeOrBuilder>(
                (org.blaze.protobuf.GlobalLimitExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 6;
      onChanged();;
      return globalLimitBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.LocalLimitExecNode, org.blaze.protobuf.LocalLimitExecNode.Builder, org.blaze.protobuf.LocalLimitExecNodeOrBuilder> localLimitBuilder_;
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     * @return Whether the localLimit field is set.
     */
    @java.lang.Override
    public boolean hasLocalLimit() {
      return physicalPlanTypeCase_ == 7;
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     * @return The localLimit.
     */
    @java.lang.Override
    public org.blaze.protobuf.LocalLimitExecNode getLocalLimit() {
      if (localLimitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 7) {
          return (org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.LocalLimitExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 7) {
          return localLimitBuilder_.getMessage();
        }
        return org.blaze.protobuf.LocalLimitExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     */
    public Builder setLocalLimit(org.blaze.protobuf.LocalLimitExecNode value) {
      if (localLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        localLimitBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     */
    public Builder setLocalLimit(
        org.blaze.protobuf.LocalLimitExecNode.Builder builderForValue) {
      if (localLimitBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        localLimitBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     */
    public Builder mergeLocalLimit(org.blaze.protobuf.LocalLimitExecNode value) {
      if (localLimitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 7 &&
            physicalPlanType_ != org.blaze.protobuf.LocalLimitExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.LocalLimitExecNode.newBuilder((org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 7) {
          localLimitBuilder_.mergeFrom(value);
        }
        localLimitBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     */
    public Builder clearLocalLimit() {
      if (localLimitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 7) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 7) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        localLimitBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     */
    public org.blaze.protobuf.LocalLimitExecNode.Builder getLocalLimitBuilder() {
      return getLocalLimitFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.LocalLimitExecNodeOrBuilder getLocalLimitOrBuilder() {
      if ((physicalPlanTypeCase_ == 7) && (localLimitBuilder_ != null)) {
        return localLimitBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 7) {
          return (org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.LocalLimitExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.LocalLimitExecNode local_limit = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.LocalLimitExecNode, org.blaze.protobuf.LocalLimitExecNode.Builder, org.blaze.protobuf.LocalLimitExecNodeOrBuilder> 
        getLocalLimitFieldBuilder() {
      if (localLimitBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 7)) {
          physicalPlanType_ = org.blaze.protobuf.LocalLimitExecNode.getDefaultInstance();
        }
        localLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.LocalLimitExecNode, org.blaze.protobuf.LocalLimitExecNode.Builder, org.blaze.protobuf.LocalLimitExecNodeOrBuilder>(
                (org.blaze.protobuf.LocalLimitExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 7;
      onChanged();;
      return localLimitBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.HashAggregateExecNode, org.blaze.protobuf.HashAggregateExecNode.Builder, org.blaze.protobuf.HashAggregateExecNodeOrBuilder> hashAggregateBuilder_;
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     * @return Whether the hashAggregate field is set.
     */
    @java.lang.Override
    public boolean hasHashAggregate() {
      return physicalPlanTypeCase_ == 8;
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     * @return The hashAggregate.
     */
    @java.lang.Override
    public org.blaze.protobuf.HashAggregateExecNode getHashAggregate() {
      if (hashAggregateBuilder_ == null) {
        if (physicalPlanTypeCase_ == 8) {
          return (org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.HashAggregateExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 8) {
          return hashAggregateBuilder_.getMessage();
        }
        return org.blaze.protobuf.HashAggregateExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     */
    public Builder setHashAggregate(org.blaze.protobuf.HashAggregateExecNode value) {
      if (hashAggregateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        hashAggregateBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     */
    public Builder setHashAggregate(
        org.blaze.protobuf.HashAggregateExecNode.Builder builderForValue) {
      if (hashAggregateBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        hashAggregateBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     */
    public Builder mergeHashAggregate(org.blaze.protobuf.HashAggregateExecNode value) {
      if (hashAggregateBuilder_ == null) {
        if (physicalPlanTypeCase_ == 8 &&
            physicalPlanType_ != org.blaze.protobuf.HashAggregateExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.HashAggregateExecNode.newBuilder((org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 8) {
          hashAggregateBuilder_.mergeFrom(value);
        }
        hashAggregateBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     */
    public Builder clearHashAggregate() {
      if (hashAggregateBuilder_ == null) {
        if (physicalPlanTypeCase_ == 8) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 8) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        hashAggregateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     */
    public org.blaze.protobuf.HashAggregateExecNode.Builder getHashAggregateBuilder() {
      return getHashAggregateFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.HashAggregateExecNodeOrBuilder getHashAggregateOrBuilder() {
      if ((physicalPlanTypeCase_ == 8) && (hashAggregateBuilder_ != null)) {
        return hashAggregateBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 8) {
          return (org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.HashAggregateExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.HashAggregateExecNode hash_aggregate = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.HashAggregateExecNode, org.blaze.protobuf.HashAggregateExecNode.Builder, org.blaze.protobuf.HashAggregateExecNodeOrBuilder> 
        getHashAggregateFieldBuilder() {
      if (hashAggregateBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 8)) {
          physicalPlanType_ = org.blaze.protobuf.HashAggregateExecNode.getDefaultInstance();
        }
        hashAggregateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.HashAggregateExecNode, org.blaze.protobuf.HashAggregateExecNode.Builder, org.blaze.protobuf.HashAggregateExecNodeOrBuilder>(
                (org.blaze.protobuf.HashAggregateExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 8;
      onChanged();;
      return hashAggregateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.HashJoinExecNode, org.blaze.protobuf.HashJoinExecNode.Builder, org.blaze.protobuf.HashJoinExecNodeOrBuilder> hashJoinBuilder_;
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     * @return Whether the hashJoin field is set.
     */
    @java.lang.Override
    public boolean hasHashJoin() {
      return physicalPlanTypeCase_ == 9;
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     * @return The hashJoin.
     */
    @java.lang.Override
    public org.blaze.protobuf.HashJoinExecNode getHashJoin() {
      if (hashJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 9) {
          return (org.blaze.protobuf.HashJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.HashJoinExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 9) {
          return hashJoinBuilder_.getMessage();
        }
        return org.blaze.protobuf.HashJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     */
    public Builder setHashJoin(org.blaze.protobuf.HashJoinExecNode value) {
      if (hashJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        hashJoinBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     */
    public Builder setHashJoin(
        org.blaze.protobuf.HashJoinExecNode.Builder builderForValue) {
      if (hashJoinBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        hashJoinBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     */
    public Builder mergeHashJoin(org.blaze.protobuf.HashJoinExecNode value) {
      if (hashJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 9 &&
            physicalPlanType_ != org.blaze.protobuf.HashJoinExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.HashJoinExecNode.newBuilder((org.blaze.protobuf.HashJoinExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 9) {
          hashJoinBuilder_.mergeFrom(value);
        }
        hashJoinBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     */
    public Builder clearHashJoin() {
      if (hashJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 9) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 9) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        hashJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     */
    public org.blaze.protobuf.HashJoinExecNode.Builder getHashJoinBuilder() {
      return getHashJoinFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.HashJoinExecNodeOrBuilder getHashJoinOrBuilder() {
      if ((physicalPlanTypeCase_ == 9) && (hashJoinBuilder_ != null)) {
        return hashJoinBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 9) {
          return (org.blaze.protobuf.HashJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.HashJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.HashJoinExecNode hash_join = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.HashJoinExecNode, org.blaze.protobuf.HashJoinExecNode.Builder, org.blaze.protobuf.HashJoinExecNodeOrBuilder> 
        getHashJoinFieldBuilder() {
      if (hashJoinBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 9)) {
          physicalPlanType_ = org.blaze.protobuf.HashJoinExecNode.getDefaultInstance();
        }
        hashJoinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.HashJoinExecNode, org.blaze.protobuf.HashJoinExecNode.Builder, org.blaze.protobuf.HashJoinExecNodeOrBuilder>(
                (org.blaze.protobuf.HashJoinExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 9;
      onChanged();;
      return hashJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ShuffleReaderExecNode, org.blaze.protobuf.ShuffleReaderExecNode.Builder, org.blaze.protobuf.ShuffleReaderExecNodeOrBuilder> shuffleReaderBuilder_;
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     * @return Whether the shuffleReader field is set.
     */
    @java.lang.Override
    public boolean hasShuffleReader() {
      return physicalPlanTypeCase_ == 10;
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     * @return The shuffleReader.
     */
    @java.lang.Override
    public org.blaze.protobuf.ShuffleReaderExecNode getShuffleReader() {
      if (shuffleReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 10) {
          return (org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ShuffleReaderExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 10) {
          return shuffleReaderBuilder_.getMessage();
        }
        return org.blaze.protobuf.ShuffleReaderExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     */
    public Builder setShuffleReader(org.blaze.protobuf.ShuffleReaderExecNode value) {
      if (shuffleReaderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        shuffleReaderBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     */
    public Builder setShuffleReader(
        org.blaze.protobuf.ShuffleReaderExecNode.Builder builderForValue) {
      if (shuffleReaderBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        shuffleReaderBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     */
    public Builder mergeShuffleReader(org.blaze.protobuf.ShuffleReaderExecNode value) {
      if (shuffleReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 10 &&
            physicalPlanType_ != org.blaze.protobuf.ShuffleReaderExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ShuffleReaderExecNode.newBuilder((org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 10) {
          shuffleReaderBuilder_.mergeFrom(value);
        }
        shuffleReaderBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     */
    public Builder clearShuffleReader() {
      if (shuffleReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 10) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 10) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        shuffleReaderBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     */
    public org.blaze.protobuf.ShuffleReaderExecNode.Builder getShuffleReaderBuilder() {
      return getShuffleReaderFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ShuffleReaderExecNodeOrBuilder getShuffleReaderOrBuilder() {
      if ((physicalPlanTypeCase_ == 10) && (shuffleReaderBuilder_ != null)) {
        return shuffleReaderBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 10) {
          return (org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ShuffleReaderExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ShuffleReaderExecNode shuffle_reader = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ShuffleReaderExecNode, org.blaze.protobuf.ShuffleReaderExecNode.Builder, org.blaze.protobuf.ShuffleReaderExecNodeOrBuilder> 
        getShuffleReaderFieldBuilder() {
      if (shuffleReaderBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 10)) {
          physicalPlanType_ = org.blaze.protobuf.ShuffleReaderExecNode.getDefaultInstance();
        }
        shuffleReaderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ShuffleReaderExecNode, org.blaze.protobuf.ShuffleReaderExecNode.Builder, org.blaze.protobuf.ShuffleReaderExecNodeOrBuilder>(
                (org.blaze.protobuf.ShuffleReaderExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 10;
      onChanged();;
      return shuffleReaderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.SortExecNode, org.blaze.protobuf.SortExecNode.Builder, org.blaze.protobuf.SortExecNodeOrBuilder> sortBuilder_;
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     * @return Whether the sort field is set.
     */
    @java.lang.Override
    public boolean hasSort() {
      return physicalPlanTypeCase_ == 11;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     * @return The sort.
     */
    @java.lang.Override
    public org.blaze.protobuf.SortExecNode getSort() {
      if (sortBuilder_ == null) {
        if (physicalPlanTypeCase_ == 11) {
          return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.SortExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 11) {
          return sortBuilder_.getMessage();
        }
        return org.blaze.protobuf.SortExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     */
    public Builder setSort(org.blaze.protobuf.SortExecNode value) {
      if (sortBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        sortBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     */
    public Builder setSort(
        org.blaze.protobuf.SortExecNode.Builder builderForValue) {
      if (sortBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        sortBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     */
    public Builder mergeSort(org.blaze.protobuf.SortExecNode value) {
      if (sortBuilder_ == null) {
        if (physicalPlanTypeCase_ == 11 &&
            physicalPlanType_ != org.blaze.protobuf.SortExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.SortExecNode.newBuilder((org.blaze.protobuf.SortExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 11) {
          sortBuilder_.mergeFrom(value);
        }
        sortBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     */
    public Builder clearSort() {
      if (sortBuilder_ == null) {
        if (physicalPlanTypeCase_ == 11) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 11) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        sortBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     */
    public org.blaze.protobuf.SortExecNode.Builder getSortBuilder() {
      return getSortFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.SortExecNodeOrBuilder getSortOrBuilder() {
      if ((physicalPlanTypeCase_ == 11) && (sortBuilder_ != null)) {
        return sortBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 11) {
          return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.SortExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.SortExecNode, org.blaze.protobuf.SortExecNode.Builder, org.blaze.protobuf.SortExecNodeOrBuilder> 
        getSortFieldBuilder() {
      if (sortBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 11)) {
          physicalPlanType_ = org.blaze.protobuf.SortExecNode.getDefaultInstance();
        }
        sortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.SortExecNode, org.blaze.protobuf.SortExecNode.Builder, org.blaze.protobuf.SortExecNodeOrBuilder>(
                (org.blaze.protobuf.SortExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 11;
      onChanged();;
      return sortBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CoalesceBatchesExecNode, org.blaze.protobuf.CoalesceBatchesExecNode.Builder, org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder> coalesceBatchesBuilder_;
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     * @return Whether the coalesceBatches field is set.
     */
    @java.lang.Override
    public boolean hasCoalesceBatches() {
      return physicalPlanTypeCase_ == 12;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     * @return The coalesceBatches.
     */
    @java.lang.Override
    public org.blaze.protobuf.CoalesceBatchesExecNode getCoalesceBatches() {
      if (coalesceBatchesBuilder_ == null) {
        if (physicalPlanTypeCase_ == 12) {
          return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 12) {
          return coalesceBatchesBuilder_.getMessage();
        }
        return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     */
    public Builder setCoalesceBatches(org.blaze.protobuf.CoalesceBatchesExecNode value) {
      if (coalesceBatchesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        coalesceBatchesBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     */
    public Builder setCoalesceBatches(
        org.blaze.protobuf.CoalesceBatchesExecNode.Builder builderForValue) {
      if (coalesceBatchesBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        coalesceBatchesBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     */
    public Builder mergeCoalesceBatches(org.blaze.protobuf.CoalesceBatchesExecNode value) {
      if (coalesceBatchesBuilder_ == null) {
        if (physicalPlanTypeCase_ == 12 &&
            physicalPlanType_ != org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.CoalesceBatchesExecNode.newBuilder((org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 12) {
          coalesceBatchesBuilder_.mergeFrom(value);
        }
        coalesceBatchesBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     */
    public Builder clearCoalesceBatches() {
      if (coalesceBatchesBuilder_ == null) {
        if (physicalPlanTypeCase_ == 12) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 12) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        coalesceBatchesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     */
    public org.blaze.protobuf.CoalesceBatchesExecNode.Builder getCoalesceBatchesBuilder() {
      return getCoalesceBatchesFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder getCoalesceBatchesOrBuilder() {
      if ((physicalPlanTypeCase_ == 12) && (coalesceBatchesBuilder_ != null)) {
        return coalesceBatchesBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 12) {
          return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CoalesceBatchesExecNode, org.blaze.protobuf.CoalesceBatchesExecNode.Builder, org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder> 
        getCoalesceBatchesFieldBuilder() {
      if (coalesceBatchesBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 12)) {
          physicalPlanType_ = org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
        }
        coalesceBatchesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.CoalesceBatchesExecNode, org.blaze.protobuf.CoalesceBatchesExecNode.Builder, org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder>(
                (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 12;
      onChanged();;
      return coalesceBatchesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.FilterExecNode, org.blaze.protobuf.FilterExecNode.Builder, org.blaze.protobuf.FilterExecNodeOrBuilder> filterBuilder_;
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     * @return Whether the filter field is set.
     */
    @java.lang.Override
    public boolean hasFilter() {
      return physicalPlanTypeCase_ == 13;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     * @return The filter.
     */
    @java.lang.Override
    public org.blaze.protobuf.FilterExecNode getFilter() {
      if (filterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 13) {
          return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 13) {
          return filterBuilder_.getMessage();
        }
        return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     */
    public Builder setFilter(org.blaze.protobuf.FilterExecNode value) {
      if (filterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        filterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     */
    public Builder setFilter(
        org.blaze.protobuf.FilterExecNode.Builder builderForValue) {
      if (filterBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        filterBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     */
    public Builder mergeFilter(org.blaze.protobuf.FilterExecNode value) {
      if (filterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 13 &&
            physicalPlanType_ != org.blaze.protobuf.FilterExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.FilterExecNode.newBuilder((org.blaze.protobuf.FilterExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 13) {
          filterBuilder_.mergeFrom(value);
        }
        filterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     */
    public Builder clearFilter() {
      if (filterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 13) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 13) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        filterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     */
    public org.blaze.protobuf.FilterExecNode.Builder getFilterBuilder() {
      return getFilterFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.FilterExecNodeOrBuilder getFilterOrBuilder() {
      if ((physicalPlanTypeCase_ == 13) && (filterBuilder_ != null)) {
        return filterBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 13) {
          return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.FilterExecNode, org.blaze.protobuf.FilterExecNode.Builder, org.blaze.protobuf.FilterExecNodeOrBuilder> 
        getFilterFieldBuilder() {
      if (filterBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 13)) {
          physicalPlanType_ = org.blaze.protobuf.FilterExecNode.getDefaultInstance();
        }
        filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.FilterExecNode, org.blaze.protobuf.FilterExecNode.Builder, org.blaze.protobuf.FilterExecNodeOrBuilder>(
                (org.blaze.protobuf.FilterExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 13;
      onChanged();;
      return filterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CoalescePartitionsExecNode, org.blaze.protobuf.CoalescePartitionsExecNode.Builder, org.blaze.protobuf.CoalescePartitionsExecNodeOrBuilder> mergeBuilder_;
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     * @return Whether the merge field is set.
     */
    @java.lang.Override
    public boolean hasMerge() {
      return physicalPlanTypeCase_ == 14;
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     * @return The merge.
     */
    @java.lang.Override
    public org.blaze.protobuf.CoalescePartitionsExecNode getMerge() {
      if (mergeBuilder_ == null) {
        if (physicalPlanTypeCase_ == 14) {
          return (org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CoalescePartitionsExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 14) {
          return mergeBuilder_.getMessage();
        }
        return org.blaze.protobuf.CoalescePartitionsExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     */
    public Builder setMerge(org.blaze.protobuf.CoalescePartitionsExecNode value) {
      if (mergeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        mergeBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     */
    public Builder setMerge(
        org.blaze.protobuf.CoalescePartitionsExecNode.Builder builderForValue) {
      if (mergeBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        mergeBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     */
    public Builder mergeMerge(org.blaze.protobuf.CoalescePartitionsExecNode value) {
      if (mergeBuilder_ == null) {
        if (physicalPlanTypeCase_ == 14 &&
            physicalPlanType_ != org.blaze.protobuf.CoalescePartitionsExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.CoalescePartitionsExecNode.newBuilder((org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 14) {
          mergeBuilder_.mergeFrom(value);
        }
        mergeBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     */
    public Builder clearMerge() {
      if (mergeBuilder_ == null) {
        if (physicalPlanTypeCase_ == 14) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 14) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        mergeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     */
    public org.blaze.protobuf.CoalescePartitionsExecNode.Builder getMergeBuilder() {
      return getMergeFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.CoalescePartitionsExecNodeOrBuilder getMergeOrBuilder() {
      if ((physicalPlanTypeCase_ == 14) && (mergeBuilder_ != null)) {
        return mergeBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 14) {
          return (org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CoalescePartitionsExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CoalescePartitionsExecNode merge = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CoalescePartitionsExecNode, org.blaze.protobuf.CoalescePartitionsExecNode.Builder, org.blaze.protobuf.CoalescePartitionsExecNodeOrBuilder> 
        getMergeFieldBuilder() {
      if (mergeBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 14)) {
          physicalPlanType_ = org.blaze.protobuf.CoalescePartitionsExecNode.getDefaultInstance();
        }
        mergeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.CoalescePartitionsExecNode, org.blaze.protobuf.CoalescePartitionsExecNode.Builder, org.blaze.protobuf.CoalescePartitionsExecNodeOrBuilder>(
                (org.blaze.protobuf.CoalescePartitionsExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 14;
      onChanged();;
      return mergeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.UnresolvedShuffleExecNode, org.blaze.protobuf.UnresolvedShuffleExecNode.Builder, org.blaze.protobuf.UnresolvedShuffleExecNodeOrBuilder> unresolvedBuilder_;
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     * @return Whether the unresolved field is set.
     */
    @java.lang.Override
    public boolean hasUnresolved() {
      return physicalPlanTypeCase_ == 15;
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     * @return The unresolved.
     */
    @java.lang.Override
    public org.blaze.protobuf.UnresolvedShuffleExecNode getUnresolved() {
      if (unresolvedBuilder_ == null) {
        if (physicalPlanTypeCase_ == 15) {
          return (org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.UnresolvedShuffleExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 15) {
          return unresolvedBuilder_.getMessage();
        }
        return org.blaze.protobuf.UnresolvedShuffleExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     */
    public Builder setUnresolved(org.blaze.protobuf.UnresolvedShuffleExecNode value) {
      if (unresolvedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        unresolvedBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     */
    public Builder setUnresolved(
        org.blaze.protobuf.UnresolvedShuffleExecNode.Builder builderForValue) {
      if (unresolvedBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        unresolvedBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     */
    public Builder mergeUnresolved(org.blaze.protobuf.UnresolvedShuffleExecNode value) {
      if (unresolvedBuilder_ == null) {
        if (physicalPlanTypeCase_ == 15 &&
            physicalPlanType_ != org.blaze.protobuf.UnresolvedShuffleExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.UnresolvedShuffleExecNode.newBuilder((org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 15) {
          unresolvedBuilder_.mergeFrom(value);
        }
        unresolvedBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     */
    public Builder clearUnresolved() {
      if (unresolvedBuilder_ == null) {
        if (physicalPlanTypeCase_ == 15) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 15) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        unresolvedBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     */
    public org.blaze.protobuf.UnresolvedShuffleExecNode.Builder getUnresolvedBuilder() {
      return getUnresolvedFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.UnresolvedShuffleExecNodeOrBuilder getUnresolvedOrBuilder() {
      if ((physicalPlanTypeCase_ == 15) && (unresolvedBuilder_ != null)) {
        return unresolvedBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 15) {
          return (org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.UnresolvedShuffleExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.UnresolvedShuffleExecNode unresolved = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.UnresolvedShuffleExecNode, org.blaze.protobuf.UnresolvedShuffleExecNode.Builder, org.blaze.protobuf.UnresolvedShuffleExecNodeOrBuilder> 
        getUnresolvedFieldBuilder() {
      if (unresolvedBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 15)) {
          physicalPlanType_ = org.blaze.protobuf.UnresolvedShuffleExecNode.getDefaultInstance();
        }
        unresolvedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.UnresolvedShuffleExecNode, org.blaze.protobuf.UnresolvedShuffleExecNode.Builder, org.blaze.protobuf.UnresolvedShuffleExecNodeOrBuilder>(
                (org.blaze.protobuf.UnresolvedShuffleExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 15;
      onChanged();;
      return unresolvedBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RepartitionExecNode, org.blaze.protobuf.RepartitionExecNode.Builder, org.blaze.protobuf.RepartitionExecNodeOrBuilder> repartitionBuilder_;
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     * @return Whether the repartition field is set.
     */
    @java.lang.Override
    public boolean hasRepartition() {
      return physicalPlanTypeCase_ == 16;
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     * @return The repartition.
     */
    @java.lang.Override
    public org.blaze.protobuf.RepartitionExecNode getRepartition() {
      if (repartitionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 16) {
          return (org.blaze.protobuf.RepartitionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.RepartitionExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 16) {
          return repartitionBuilder_.getMessage();
        }
        return org.blaze.protobuf.RepartitionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     */
    public Builder setRepartition(org.blaze.protobuf.RepartitionExecNode value) {
      if (repartitionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        repartitionBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     */
    public Builder setRepartition(
        org.blaze.protobuf.RepartitionExecNode.Builder builderForValue) {
      if (repartitionBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        repartitionBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     */
    public Builder mergeRepartition(org.blaze.protobuf.RepartitionExecNode value) {
      if (repartitionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 16 &&
            physicalPlanType_ != org.blaze.protobuf.RepartitionExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.RepartitionExecNode.newBuilder((org.blaze.protobuf.RepartitionExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 16) {
          repartitionBuilder_.mergeFrom(value);
        }
        repartitionBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     */
    public Builder clearRepartition() {
      if (repartitionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 16) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 16) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        repartitionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     */
    public org.blaze.protobuf.RepartitionExecNode.Builder getRepartitionBuilder() {
      return getRepartitionFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.RepartitionExecNodeOrBuilder getRepartitionOrBuilder() {
      if ((physicalPlanTypeCase_ == 16) && (repartitionBuilder_ != null)) {
        return repartitionBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 16) {
          return (org.blaze.protobuf.RepartitionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.RepartitionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.RepartitionExecNode repartition = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RepartitionExecNode, org.blaze.protobuf.RepartitionExecNode.Builder, org.blaze.protobuf.RepartitionExecNodeOrBuilder> 
        getRepartitionFieldBuilder() {
      if (repartitionBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 16)) {
          physicalPlanType_ = org.blaze.protobuf.RepartitionExecNode.getDefaultInstance();
        }
        repartitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.RepartitionExecNode, org.blaze.protobuf.RepartitionExecNode.Builder, org.blaze.protobuf.RepartitionExecNodeOrBuilder>(
                (org.blaze.protobuf.RepartitionExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 16;
      onChanged();;
      return repartitionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.WindowAggExecNode, org.blaze.protobuf.WindowAggExecNode.Builder, org.blaze.protobuf.WindowAggExecNodeOrBuilder> windowBuilder_;
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     * @return Whether the window field is set.
     */
    @java.lang.Override
    public boolean hasWindow() {
      return physicalPlanTypeCase_ == 17;
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     * @return The window.
     */
    @java.lang.Override
    public org.blaze.protobuf.WindowAggExecNode getWindow() {
      if (windowBuilder_ == null) {
        if (physicalPlanTypeCase_ == 17) {
          return (org.blaze.protobuf.WindowAggExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.WindowAggExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 17) {
          return windowBuilder_.getMessage();
        }
        return org.blaze.protobuf.WindowAggExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     */
    public Builder setWindow(org.blaze.protobuf.WindowAggExecNode value) {
      if (windowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        windowBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     */
    public Builder setWindow(
        org.blaze.protobuf.WindowAggExecNode.Builder builderForValue) {
      if (windowBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        windowBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     */
    public Builder mergeWindow(org.blaze.protobuf.WindowAggExecNode value) {
      if (windowBuilder_ == null) {
        if (physicalPlanTypeCase_ == 17 &&
            physicalPlanType_ != org.blaze.protobuf.WindowAggExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.WindowAggExecNode.newBuilder((org.blaze.protobuf.WindowAggExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 17) {
          windowBuilder_.mergeFrom(value);
        }
        windowBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     */
    public Builder clearWindow() {
      if (windowBuilder_ == null) {
        if (physicalPlanTypeCase_ == 17) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 17) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        windowBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     */
    public org.blaze.protobuf.WindowAggExecNode.Builder getWindowBuilder() {
      return getWindowFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.WindowAggExecNodeOrBuilder getWindowOrBuilder() {
      if ((physicalPlanTypeCase_ == 17) && (windowBuilder_ != null)) {
        return windowBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 17) {
          return (org.blaze.protobuf.WindowAggExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.WindowAggExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.WindowAggExecNode window = 17;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.WindowAggExecNode, org.blaze.protobuf.WindowAggExecNode.Builder, org.blaze.protobuf.WindowAggExecNodeOrBuilder> 
        getWindowFieldBuilder() {
      if (windowBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 17)) {
          physicalPlanType_ = org.blaze.protobuf.WindowAggExecNode.getDefaultInstance();
        }
        windowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.WindowAggExecNode, org.blaze.protobuf.WindowAggExecNode.Builder, org.blaze.protobuf.WindowAggExecNodeOrBuilder>(
                (org.blaze.protobuf.WindowAggExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 17;
      onChanged();;
      return windowBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ShuffleWriterExecNode, org.blaze.protobuf.ShuffleWriterExecNode.Builder, org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder> shuffleWriterBuilder_;
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     * @return Whether the shuffleWriter field is set.
     */
    @java.lang.Override
    public boolean hasShuffleWriter() {
      return physicalPlanTypeCase_ == 18;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     * @return The shuffleWriter.
     */
    @java.lang.Override
    public org.blaze.protobuf.ShuffleWriterExecNode getShuffleWriter() {
      if (shuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 18) {
          return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 18) {
          return shuffleWriterBuilder_.getMessage();
        }
        return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     */
    public Builder setShuffleWriter(org.blaze.protobuf.ShuffleWriterExecNode value) {
      if (shuffleWriterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        shuffleWriterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     */
    public Builder setShuffleWriter(
        org.blaze.protobuf.ShuffleWriterExecNode.Builder builderForValue) {
      if (shuffleWriterBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        shuffleWriterBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     */
    public Builder mergeShuffleWriter(org.blaze.protobuf.ShuffleWriterExecNode value) {
      if (shuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 18 &&
            physicalPlanType_ != org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ShuffleWriterExecNode.newBuilder((org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 18) {
          shuffleWriterBuilder_.mergeFrom(value);
        }
        shuffleWriterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     */
    public Builder clearShuffleWriter() {
      if (shuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 18) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 18) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        shuffleWriterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     */
    public org.blaze.protobuf.ShuffleWriterExecNode.Builder getShuffleWriterBuilder() {
      return getShuffleWriterFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder getShuffleWriterOrBuilder() {
      if ((physicalPlanTypeCase_ == 18) && (shuffleWriterBuilder_ != null)) {
        return shuffleWriterBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 18) {
          return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 18;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ShuffleWriterExecNode, org.blaze.protobuf.ShuffleWriterExecNode.Builder, org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder> 
        getShuffleWriterFieldBuilder() {
      if (shuffleWriterBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 18)) {
          physicalPlanType_ = org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
        }
        shuffleWriterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ShuffleWriterExecNode, org.blaze.protobuf.ShuffleWriterExecNode.Builder, org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder>(
                (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 18;
      onChanged();;
      return shuffleWriterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CrossJoinExecNode, org.blaze.protobuf.CrossJoinExecNode.Builder, org.blaze.protobuf.CrossJoinExecNodeOrBuilder> crossJoinBuilder_;
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     * @return Whether the crossJoin field is set.
     */
    @java.lang.Override
    public boolean hasCrossJoin() {
      return physicalPlanTypeCase_ == 19;
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     * @return The crossJoin.
     */
    @java.lang.Override
    public org.blaze.protobuf.CrossJoinExecNode getCrossJoin() {
      if (crossJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 19) {
          return (org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CrossJoinExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 19) {
          return crossJoinBuilder_.getMessage();
        }
        return org.blaze.protobuf.CrossJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     */
    public Builder setCrossJoin(org.blaze.protobuf.CrossJoinExecNode value) {
      if (crossJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        crossJoinBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     */
    public Builder setCrossJoin(
        org.blaze.protobuf.CrossJoinExecNode.Builder builderForValue) {
      if (crossJoinBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        crossJoinBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     */
    public Builder mergeCrossJoin(org.blaze.protobuf.CrossJoinExecNode value) {
      if (crossJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 19 &&
            physicalPlanType_ != org.blaze.protobuf.CrossJoinExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.CrossJoinExecNode.newBuilder((org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 19) {
          crossJoinBuilder_.mergeFrom(value);
        }
        crossJoinBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     */
    public Builder clearCrossJoin() {
      if (crossJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 19) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 19) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        crossJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     */
    public org.blaze.protobuf.CrossJoinExecNode.Builder getCrossJoinBuilder() {
      return getCrossJoinFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.CrossJoinExecNodeOrBuilder getCrossJoinOrBuilder() {
      if ((physicalPlanTypeCase_ == 19) && (crossJoinBuilder_ != null)) {
        return crossJoinBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 19) {
          return (org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CrossJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CrossJoinExecNode cross_join = 19;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CrossJoinExecNode, org.blaze.protobuf.CrossJoinExecNode.Builder, org.blaze.protobuf.CrossJoinExecNodeOrBuilder> 
        getCrossJoinFieldBuilder() {
      if (crossJoinBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 19)) {
          physicalPlanType_ = org.blaze.protobuf.CrossJoinExecNode.getDefaultInstance();
        }
        crossJoinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.CrossJoinExecNode, org.blaze.protobuf.CrossJoinExecNode.Builder, org.blaze.protobuf.CrossJoinExecNodeOrBuilder>(
                (org.blaze.protobuf.CrossJoinExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 19;
      onChanged();;
      return crossJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.AvroScanExecNode, org.blaze.protobuf.AvroScanExecNode.Builder, org.blaze.protobuf.AvroScanExecNodeOrBuilder> avroScanBuilder_;
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     * @return Whether the avroScan field is set.
     */
    @java.lang.Override
    public boolean hasAvroScan() {
      return physicalPlanTypeCase_ == 20;
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     * @return The avroScan.
     */
    @java.lang.Override
    public org.blaze.protobuf.AvroScanExecNode getAvroScan() {
      if (avroScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 20) {
          return (org.blaze.protobuf.AvroScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.AvroScanExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 20) {
          return avroScanBuilder_.getMessage();
        }
        return org.blaze.protobuf.AvroScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     */
    public Builder setAvroScan(org.blaze.protobuf.AvroScanExecNode value) {
      if (avroScanBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        avroScanBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     */
    public Builder setAvroScan(
        org.blaze.protobuf.AvroScanExecNode.Builder builderForValue) {
      if (avroScanBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        avroScanBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     */
    public Builder mergeAvroScan(org.blaze.protobuf.AvroScanExecNode value) {
      if (avroScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 20 &&
            physicalPlanType_ != org.blaze.protobuf.AvroScanExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.AvroScanExecNode.newBuilder((org.blaze.protobuf.AvroScanExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 20) {
          avroScanBuilder_.mergeFrom(value);
        }
        avroScanBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     */
    public Builder clearAvroScan() {
      if (avroScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 20) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 20) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        avroScanBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     */
    public org.blaze.protobuf.AvroScanExecNode.Builder getAvroScanBuilder() {
      return getAvroScanFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.AvroScanExecNodeOrBuilder getAvroScanOrBuilder() {
      if ((physicalPlanTypeCase_ == 20) && (avroScanBuilder_ != null)) {
        return avroScanBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 20) {
          return (org.blaze.protobuf.AvroScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.AvroScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.AvroScanExecNode avro_scan = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.AvroScanExecNode, org.blaze.protobuf.AvroScanExecNode.Builder, org.blaze.protobuf.AvroScanExecNodeOrBuilder> 
        getAvroScanFieldBuilder() {
      if (avroScanBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 20)) {
          physicalPlanType_ = org.blaze.protobuf.AvroScanExecNode.getDefaultInstance();
        }
        avroScanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.AvroScanExecNode, org.blaze.protobuf.AvroScanExecNode.Builder, org.blaze.protobuf.AvroScanExecNodeOrBuilder>(
                (org.blaze.protobuf.AvroScanExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 20;
      onChanged();;
      return avroScanBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:plan.protobuf.PhysicalPlanNode)
  }

  // @@protoc_insertion_point(class_scope:plan.protobuf.PhysicalPlanNode)
  private static final org.blaze.protobuf.PhysicalPlanNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.blaze.protobuf.PhysicalPlanNode();
  }

  public static org.blaze.protobuf.PhysicalPlanNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PhysicalPlanNode>
      PARSER = new com.google.protobuf.AbstractParser<PhysicalPlanNode>() {
    @java.lang.Override
    public PhysicalPlanNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PhysicalPlanNode(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PhysicalPlanNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PhysicalPlanNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.blaze.protobuf.PhysicalPlanNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

