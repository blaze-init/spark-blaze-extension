// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/plan.proto

package org.blaze.protobuf;

/**
 * Protobuf enum {@code plan.protobuf.ScalarFunction}
 */
public enum ScalarFunction
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SQRT = 0;</code>
   */
  SQRT(0),
  /**
   * <code>SIN = 1;</code>
   */
  SIN(1),
  /**
   * <code>COS = 2;</code>
   */
  COS(2),
  /**
   * <code>TAN = 3;</code>
   */
  TAN(3),
  /**
   * <code>ASIN = 4;</code>
   */
  ASIN(4),
  /**
   * <code>ACOS = 5;</code>
   */
  ACOS(5),
  /**
   * <code>ATAN = 6;</code>
   */
  ATAN(6),
  /**
   * <code>EXP = 7;</code>
   */
  EXP(7),
  /**
   * <code>LOG = 8;</code>
   */
  LOG(8),
  /**
   * <code>LOG2 = 9;</code>
   */
  LOG2(9),
  /**
   * <code>LOG10 = 10;</code>
   */
  LOG10(10),
  /**
   * <code>FLOOR = 11;</code>
   */
  FLOOR(11),
  /**
   * <code>CEIL = 12;</code>
   */
  CEIL(12),
  /**
   * <code>ROUND = 13;</code>
   */
  ROUND(13),
  /**
   * <code>TRUNC = 14;</code>
   */
  TRUNC(14),
  /**
   * <code>ABS = 15;</code>
   */
  ABS(15),
  /**
   * <code>SIGNUM = 16;</code>
   */
  SIGNUM(16),
  /**
   * <code>OCTETLENGTH = 17;</code>
   */
  OCTETLENGTH(17),
  /**
   * <code>CONCAT = 18;</code>
   */
  CONCAT(18),
  /**
   * <code>LOWER = 19;</code>
   */
  LOWER(19),
  /**
   * <code>UPPER = 20;</code>
   */
  UPPER(20),
  /**
   * <code>TRIM = 21;</code>
   */
  TRIM(21),
  /**
   * <code>LTRIM = 22;</code>
   */
  LTRIM(22),
  /**
   * <code>RTRIM = 23;</code>
   */
  RTRIM(23),
  /**
   * <code>TOTIMESTAMP = 24;</code>
   */
  TOTIMESTAMP(24),
  /**
   * <code>ARRAY = 25;</code>
   */
  ARRAY(25),
  /**
   * <code>NULLIF = 26;</code>
   */
  NULLIF(26),
  /**
   * <code>DATEPART = 27;</code>
   */
  DATEPART(27),
  /**
   * <code>DATETRUNC = 28;</code>
   */
  DATETRUNC(28),
  /**
   * <code>MD5 = 29;</code>
   */
  MD5(29),
  /**
   * <code>SHA224 = 30;</code>
   */
  SHA224(30),
  /**
   * <code>SHA256 = 31;</code>
   */
  SHA256(31),
  /**
   * <code>SHA384 = 32;</code>
   */
  SHA384(32),
  /**
   * <code>SHA512 = 33;</code>
   */
  SHA512(33),
  /**
   * <code>LN = 34;</code>
   */
  LN(34),
  /**
   * <code>TOTIMESTAMPMILLIS = 35;</code>
   */
  TOTIMESTAMPMILLIS(35),
  /**
   * <code>DIGEST = 36;</code>
   */
  DIGEST(36),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SQRT = 0;</code>
   */
  public static final int SQRT_VALUE = 0;
  /**
   * <code>SIN = 1;</code>
   */
  public static final int SIN_VALUE = 1;
  /**
   * <code>COS = 2;</code>
   */
  public static final int COS_VALUE = 2;
  /**
   * <code>TAN = 3;</code>
   */
  public static final int TAN_VALUE = 3;
  /**
   * <code>ASIN = 4;</code>
   */
  public static final int ASIN_VALUE = 4;
  /**
   * <code>ACOS = 5;</code>
   */
  public static final int ACOS_VALUE = 5;
  /**
   * <code>ATAN = 6;</code>
   */
  public static final int ATAN_VALUE = 6;
  /**
   * <code>EXP = 7;</code>
   */
  public static final int EXP_VALUE = 7;
  /**
   * <code>LOG = 8;</code>
   */
  public static final int LOG_VALUE = 8;
  /**
   * <code>LOG2 = 9;</code>
   */
  public static final int LOG2_VALUE = 9;
  /**
   * <code>LOG10 = 10;</code>
   */
  public static final int LOG10_VALUE = 10;
  /**
   * <code>FLOOR = 11;</code>
   */
  public static final int FLOOR_VALUE = 11;
  /**
   * <code>CEIL = 12;</code>
   */
  public static final int CEIL_VALUE = 12;
  /**
   * <code>ROUND = 13;</code>
   */
  public static final int ROUND_VALUE = 13;
  /**
   * <code>TRUNC = 14;</code>
   */
  public static final int TRUNC_VALUE = 14;
  /**
   * <code>ABS = 15;</code>
   */
  public static final int ABS_VALUE = 15;
  /**
   * <code>SIGNUM = 16;</code>
   */
  public static final int SIGNUM_VALUE = 16;
  /**
   * <code>OCTETLENGTH = 17;</code>
   */
  public static final int OCTETLENGTH_VALUE = 17;
  /**
   * <code>CONCAT = 18;</code>
   */
  public static final int CONCAT_VALUE = 18;
  /**
   * <code>LOWER = 19;</code>
   */
  public static final int LOWER_VALUE = 19;
  /**
   * <code>UPPER = 20;</code>
   */
  public static final int UPPER_VALUE = 20;
  /**
   * <code>TRIM = 21;</code>
   */
  public static final int TRIM_VALUE = 21;
  /**
   * <code>LTRIM = 22;</code>
   */
  public static final int LTRIM_VALUE = 22;
  /**
   * <code>RTRIM = 23;</code>
   */
  public static final int RTRIM_VALUE = 23;
  /**
   * <code>TOTIMESTAMP = 24;</code>
   */
  public static final int TOTIMESTAMP_VALUE = 24;
  /**
   * <code>ARRAY = 25;</code>
   */
  public static final int ARRAY_VALUE = 25;
  /**
   * <code>NULLIF = 26;</code>
   */
  public static final int NULLIF_VALUE = 26;
  /**
   * <code>DATEPART = 27;</code>
   */
  public static final int DATEPART_VALUE = 27;
  /**
   * <code>DATETRUNC = 28;</code>
   */
  public static final int DATETRUNC_VALUE = 28;
  /**
   * <code>MD5 = 29;</code>
   */
  public static final int MD5_VALUE = 29;
  /**
   * <code>SHA224 = 30;</code>
   */
  public static final int SHA224_VALUE = 30;
  /**
   * <code>SHA256 = 31;</code>
   */
  public static final int SHA256_VALUE = 31;
  /**
   * <code>SHA384 = 32;</code>
   */
  public static final int SHA384_VALUE = 32;
  /**
   * <code>SHA512 = 33;</code>
   */
  public static final int SHA512_VALUE = 33;
  /**
   * <code>LN = 34;</code>
   */
  public static final int LN_VALUE = 34;
  /**
   * <code>TOTIMESTAMPMILLIS = 35;</code>
   */
  public static final int TOTIMESTAMPMILLIS_VALUE = 35;
  /**
   * <code>DIGEST = 36;</code>
   */
  public static final int DIGEST_VALUE = 36;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ScalarFunction valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ScalarFunction forNumber(int value) {
    switch (value) {
      case 0: return SQRT;
      case 1: return SIN;
      case 2: return COS;
      case 3: return TAN;
      case 4: return ASIN;
      case 5: return ACOS;
      case 6: return ATAN;
      case 7: return EXP;
      case 8: return LOG;
      case 9: return LOG2;
      case 10: return LOG10;
      case 11: return FLOOR;
      case 12: return CEIL;
      case 13: return ROUND;
      case 14: return TRUNC;
      case 15: return ABS;
      case 16: return SIGNUM;
      case 17: return OCTETLENGTH;
      case 18: return CONCAT;
      case 19: return LOWER;
      case 20: return UPPER;
      case 21: return TRIM;
      case 22: return LTRIM;
      case 23: return RTRIM;
      case 24: return TOTIMESTAMP;
      case 25: return ARRAY;
      case 26: return NULLIF;
      case 27: return DATEPART;
      case 28: return DATETRUNC;
      case 29: return MD5;
      case 30: return SHA224;
      case 31: return SHA256;
      case 32: return SHA384;
      case 33: return SHA512;
      case 34: return LN;
      case 35: return TOTIMESTAMPMILLIS;
      case 36: return DIGEST;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ScalarFunction>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ScalarFunction> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ScalarFunction>() {
          public ScalarFunction findValueByNumber(int number) {
            return ScalarFunction.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.blaze.protobuf.BlazeProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final ScalarFunction[] VALUES = values();

  public static ScalarFunction valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ScalarFunction(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:plan.protobuf.ScalarFunction)
}

