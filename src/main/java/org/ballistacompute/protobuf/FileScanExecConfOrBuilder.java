// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ballista.proto

package org.ballistacompute.protobuf;

public interface FileScanExecConfOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ballista.protobuf.FileScanExecConf)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>repeated .ballista.protobuf.FileGroup file_groups = 1;</code>
   */
  java.util.List<org.ballistacompute.protobuf.FileGroup> 
      getFileGroupsList();
  /**
   * <code>repeated .ballista.protobuf.FileGroup file_groups = 1;</code>
   */
  org.ballistacompute.protobuf.FileGroup getFileGroups(int index);
  /**
   * <code>repeated .ballista.protobuf.FileGroup file_groups = 1;</code>
   */
  int getFileGroupsCount();
  /**
   * <code>repeated .ballista.protobuf.FileGroup file_groups = 1;</code>
   */
  java.util.List<? extends org.ballistacompute.protobuf.FileGroupOrBuilder> 
      getFileGroupsOrBuilderList();
  /**
   * <code>repeated .ballista.protobuf.FileGroup file_groups = 1;</code>
   */
  org.ballistacompute.protobuf.FileGroupOrBuilder getFileGroupsOrBuilder(
      int index);

  /**
   * <code>.ballista.protobuf.Schema schema = 2;</code>
   * @return Whether the schema field is set.
   */
  boolean hasSchema();
  /**
   * <code>.ballista.protobuf.Schema schema = 2;</code>
   * @return The schema.
   */
  org.ballistacompute.protobuf.Schema getSchema();
  /**
   * <code>.ballista.protobuf.Schema schema = 2;</code>
   */
  org.ballistacompute.protobuf.SchemaOrBuilder getSchemaOrBuilder();

  /**
   * <code>uint32 batch_size = 3;</code>
   * @return The batchSize.
   */
  int getBatchSize();

  /**
   * <code>repeated uint32 projection = 4;</code>
   * @return A list containing the projection.
   */
  java.util.List<java.lang.Integer> getProjectionList();
  /**
   * <code>repeated uint32 projection = 4;</code>
   * @return The count of projection.
   */
  int getProjectionCount();
  /**
   * <code>repeated uint32 projection = 4;</code>
   * @param index The index of the element to return.
   * @return The projection at the given index.
   */
  int getProjection(int index);

  /**
   * <code>.ballista.protobuf.ScanLimit limit = 5;</code>
   * @return Whether the limit field is set.
   */
  boolean hasLimit();
  /**
   * <code>.ballista.protobuf.ScanLimit limit = 5;</code>
   * @return The limit.
   */
  org.ballistacompute.protobuf.ScanLimit getLimit();
  /**
   * <code>.ballista.protobuf.ScanLimit limit = 5;</code>
   */
  org.ballistacompute.protobuf.ScanLimitOrBuilder getLimitOrBuilder();

  /**
   * <code>.ballista.protobuf.Statistics statistics = 6;</code>
   * @return Whether the statistics field is set.
   */
  boolean hasStatistics();
  /**
   * <code>.ballista.protobuf.Statistics statistics = 6;</code>
   * @return The statistics.
   */
  org.ballistacompute.protobuf.Statistics getStatistics();
  /**
   * <code>.ballista.protobuf.Statistics statistics = 6;</code>
   */
  org.ballistacompute.protobuf.StatisticsOrBuilder getStatisticsOrBuilder();

  /**
   * <code>repeated string table_partition_cols = 7;</code>
   * @return A list containing the tablePartitionCols.
   */
  java.util.List<java.lang.String>
      getTablePartitionColsList();
  /**
   * <code>repeated string table_partition_cols = 7;</code>
   * @return The count of tablePartitionCols.
   */
  int getTablePartitionColsCount();
  /**
   * <code>repeated string table_partition_cols = 7;</code>
   * @param index The index of the element to return.
   * @return The tablePartitionCols at the given index.
   */
  java.lang.String getTablePartitionCols(int index);
  /**
   * <code>repeated string table_partition_cols = 7;</code>
   * @param index The index of the value to return.
   * @return The bytes of the tablePartitionCols at the given index.
   */
  com.google.protobuf.ByteString
      getTablePartitionColsBytes(int index);
}
