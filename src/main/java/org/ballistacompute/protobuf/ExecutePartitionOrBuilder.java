// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ballista.proto

package org.ballistacompute.protobuf;

public interface ExecutePartitionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ballista.protobuf.ExecutePartition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string job_id = 1;</code>
   * @return The jobId.
   */
  java.lang.String getJobId();
  /**
   * <code>string job_id = 1;</code>
   * @return The bytes for jobId.
   */
  com.google.protobuf.ByteString
      getJobIdBytes();

  /**
   * <code>uint32 stage_id = 2;</code>
   * @return The stageId.
   */
  int getStageId();

  /**
   * <code>repeated uint32 partition_id = 3;</code>
   * @return A list containing the partitionId.
   */
  java.util.List<java.lang.Integer> getPartitionIdList();
  /**
   * <code>repeated uint32 partition_id = 3;</code>
   * @return The count of partitionId.
   */
  int getPartitionIdCount();
  /**
   * <code>repeated uint32 partition_id = 3;</code>
   * @param index The index of the element to return.
   * @return The partitionId at the given index.
   */
  int getPartitionId(int index);

  /**
   * <code>.ballista.protobuf.PhysicalPlanNode plan = 4;</code>
   * @return Whether the plan field is set.
   */
  boolean hasPlan();
  /**
   * <code>.ballista.protobuf.PhysicalPlanNode plan = 4;</code>
   * @return The plan.
   */
  org.ballistacompute.protobuf.PhysicalPlanNode getPlan();
  /**
   * <code>.ballista.protobuf.PhysicalPlanNode plan = 4;</code>
   */
  org.ballistacompute.protobuf.PhysicalPlanNodeOrBuilder getPlanOrBuilder();

  /**
   * <pre>
   * The task could need to read partitions from other executors
   * </pre>
   *
   * <code>repeated .ballista.protobuf.PartitionLocation partition_location = 5;</code>
   */
  java.util.List<org.ballistacompute.protobuf.PartitionLocation> 
      getPartitionLocationList();
  /**
   * <pre>
   * The task could need to read partitions from other executors
   * </pre>
   *
   * <code>repeated .ballista.protobuf.PartitionLocation partition_location = 5;</code>
   */
  org.ballistacompute.protobuf.PartitionLocation getPartitionLocation(int index);
  /**
   * <pre>
   * The task could need to read partitions from other executors
   * </pre>
   *
   * <code>repeated .ballista.protobuf.PartitionLocation partition_location = 5;</code>
   */
  int getPartitionLocationCount();
  /**
   * <pre>
   * The task could need to read partitions from other executors
   * </pre>
   *
   * <code>repeated .ballista.protobuf.PartitionLocation partition_location = 5;</code>
   */
  java.util.List<? extends org.ballistacompute.protobuf.PartitionLocationOrBuilder> 
      getPartitionLocationOrBuilderList();
  /**
   * <pre>
   * The task could need to read partitions from other executors
   * </pre>
   *
   * <code>repeated .ballista.protobuf.PartitionLocation partition_location = 5;</code>
   */
  org.ballistacompute.protobuf.PartitionLocationOrBuilder getPartitionLocationOrBuilder(
      int index);

  /**
   * <pre>
   * Output partition for shuffle writer
   * </pre>
   *
   * <code>.ballista.protobuf.PhysicalHashRepartition output_partitioning = 6;</code>
   * @return Whether the outputPartitioning field is set.
   */
  boolean hasOutputPartitioning();
  /**
   * <pre>
   * Output partition for shuffle writer
   * </pre>
   *
   * <code>.ballista.protobuf.PhysicalHashRepartition output_partitioning = 6;</code>
   * @return The outputPartitioning.
   */
  org.ballistacompute.protobuf.PhysicalHashRepartition getOutputPartitioning();
  /**
   * <pre>
   * Output partition for shuffle writer
   * </pre>
   *
   * <code>.ballista.protobuf.PhysicalHashRepartition output_partitioning = 6;</code>
   */
  org.ballistacompute.protobuf.PhysicalHashRepartitionOrBuilder getOutputPartitioningOrBuilder();
}
