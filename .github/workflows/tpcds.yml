name: Run TPC-DS tests

on:
  # always trigger
  pull_request:

jobs:
  fetch_validator:
    name: Fetch Validator
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: validator
    steps:
      - name: Checkout Validator
        uses: actions/checkout@v3
        with:
          repository: blaze-init/tpcds-validator
          path: validator
      - name: pwd
        run: |
          pwd
      - name: Upload validator
        uses: actions/upload-artifact@v3
        with:
          name: validator
          path: validator/assembly/spark-tpcds-datagen_2.12-0.1.0-SNAPSHOT-with-dependencies.jar

  build_blaze_lib:
    name: Build Blaze lib
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: blaze-rs
    strategy:
      matrix:
        arch: [amd64]
        rust: [stable]
    container:
      image: ${{ matrix.arch }}/rust
      env:
        # Disable full debug symbol generation to speed up CI build and keep memory down
        # "1" means line tables only, which is useful for panic tracebacks.
        RUSTFLAGS: "-C debuginfo=1"
    steps:
      - name: Checkout blaze
        uses: actions/checkout@v3
        with:
          repository: blaze-init/blaze-rs
          path: blaze-rs
      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          # these represent dependencies downloaded by cargo
          # and thus do not depend on the OS, arch nor rust version.
          path: /github/home/.cargo
          key: cargo-cache-
      - name: Cache Rust dependencies
        uses: actions/cache@v2
        with:
          # these represent compiled steps of both dependencies and arrow
          # and thus are specific for a particular OS, arch and rust version.
          path: /github/home/target
          key: ${{ runner.os }}-${{ matrix.arch }}-target-cache-${{ matrix.rust }}-
      - name: Setup Rust toolchain
        run: |
          rustup toolchain install ${{ matrix.rust }}
          rustup default ${{ matrix.rust }}
          rustup component add rustfmt
      - name: Build workspace in debug mode
        run: |
          cargo build
        env:
          CARGO_HOME: "/github/home/.cargo"
          CARGO_TARGET_DIR: "/github/home/blaze-rs/target/debug"
      - name: Upload blaze.so
        uses: actions/upload-artifact@v3
        with:
          name: libblaze
          path: blaze-rs/target/debug/libblaze.so


  build-self:
    name: Build plugin self
    needs: [fetch_validator, build_blaze_lib]
    runs-on: ubuntu-latest
    steps:
      - name: Download validator
        uses: actions/download-artifact@v3
        with:
          name: validator
      - name: Download lib
        uses: actions/download-artifact@v3
        with:
          name: libblaze
      - name: ls
        run: |
          - ls -al
      - name: Print the final result
        shell: bash
        run: |
          value=`cat math-homework.txt`
          echo The result is $value
